### YamlMime:Tutorial
title: <span data-ttu-id="bfa7c-101">通过分支和循环语句了解条件逻辑</span><span class="sxs-lookup"><span data-stu-id="bfa7c-101">Learn conditional logic with branch and loop statements</span></span>
metadata:
  title: 分支和循环 - C# 交互教程简介
  description: 本教程介绍了分支和循环，读者可以使用浏览器通过交互方式了解 C#。 读者将可以直接在浏览器中编写 C# 代码，并查看代码编译和运行结果。
  audience: Developer
  level: Beginner
  ms.custom: mvc
  ms.date: 08/24/2018
  displayType: two-column
  interactive: csharp
  nextTutorialHref: list-collection.yml
  nextTutorialTitle: <span data-ttu-id="bfa7c-105">列表集合</span><span class="sxs-lookup"><span data-stu-id="bfa7c-105">The list collection</span></span>
  ms.openlocfilehash: 0456582fb0aefa9e144b71517b9d8ed619929805
  ms.sourcegitcommit: 205b9a204742e9c77256d43ac9d94c3f82909808
  ms.translationtype: HT
  ms.contentlocale: zh-CN
  ms.lasthandoff: 09/10/2019
  ms.locfileid: "70850776"
items:
- durationInMinutes: 1
  content: >
    <span data-ttu-id="bfa7c-106">本教程介绍了如何编写代码，从而检查变量，并根据这些变量更改执行路径。</span><span class="sxs-lookup"><span data-stu-id="bfa7c-106">This tutorial teaches you how to write code that examines variables and changes execution path based on those variables.</span></span> <span data-ttu-id="bfa7c-107">读者可以使用浏览器通过交互方式编写 C#，并查看代码编译和运行结果。</span><span class="sxs-lookup"><span data-stu-id="bfa7c-107">You'll use your browser to write C# interactively and see the results of compiling and running your code.</span></span> <span data-ttu-id="bfa7c-108">本教程包含一系列课程，介绍了 C# 中的分支和循环构造。</span><span class="sxs-lookup"><span data-stu-id="bfa7c-108">This tutorial contains a series of lessons that explore branching and looping constructs in C#.</span></span> <span data-ttu-id="bfa7c-109">这些课程介绍了 C# 语言的基础知识。</span><span class="sxs-lookup"><span data-stu-id="bfa7c-109">These lessons teach you the fundamentals of the C# language.</span></span>
- title: <span data-ttu-id="bfa7c-110">使用 if 语句做出决定</span><span class="sxs-lookup"><span data-stu-id="bfa7c-110">Make decisions using the if statement</span></span>
  durationInMinutes: 4
  content: >
    <span data-ttu-id="bfa7c-111">在交互式窗口中，运行以下代码。</span><span class="sxs-lookup"><span data-stu-id="bfa7c-111">Run the following code in the interactive window.</span></span> <span data-ttu-id="bfa7c-112">为此，请在交互式窗口中键入以下代码块，再单击“运行”按钮：</span><span class="sxs-lookup"><span data-stu-id="bfa7c-112">To do that, type the following code block in the interactive window and click the **Run** button:</span></span>


    ```csharp

    int a = 5;

    int b = 6;

    if (a + b > 10)
        Console.WriteLine("The answer is greater than 10.");
    ```


    <span data-ttu-id="bfa7c-113">修改 `b` 的声明，让总和小于 10：</span><span class="sxs-lookup"><span data-stu-id="bfa7c-113">Modify the declaration of `b` so that the sum is less than 10:</span></span>


    ```csharp

    int b = 3;

    ```


    <span data-ttu-id="bfa7c-114">再次单击“运行”按钮。</span><span class="sxs-lookup"><span data-stu-id="bfa7c-114">Click the **Run** button again.</span></span> <span data-ttu-id="bfa7c-115">由于答案小于 10，因此什么也没有打印出来。</span><span class="sxs-lookup"><span data-stu-id="bfa7c-115">Because the answer is less than 10, nothing is printed.</span></span> <span data-ttu-id="bfa7c-116">要测试的条件为 false。</span><span class="sxs-lookup"><span data-stu-id="bfa7c-116">The **condition** you're testing is false.</span></span> <span data-ttu-id="bfa7c-117">没有任何可供执行的代码，因为仅为 `if` 语句编写了一个可能分支，即 true 分支。</span><span class="sxs-lookup"><span data-stu-id="bfa7c-117">You don't have any code to execute because you've only written one of the possible branches for an `if` statement: the true branch.</span></span>


    > [!TIP]

    > <span data-ttu-id="bfa7c-118">在探索 C#（或任何编程语言）的过程中，可能会在编写代码时犯错。</span><span class="sxs-lookup"><span data-stu-id="bfa7c-118">As you explore C# (or any programming language), you'll make mistakes when you write code.</span></span> <span data-ttu-id="bfa7c-119">编译器会发现并报告这些错误。</span><span class="sxs-lookup"><span data-stu-id="bfa7c-119">The **compiler** will find those errors and report them to you.</span></span> <span data-ttu-id="bfa7c-120">如果输出中有错误消息，请仔细比对示例代码和交互式窗口中的代码，看看要纠正哪些代码。</span><span class="sxs-lookup"><span data-stu-id="bfa7c-120">When the output contains error messages, look closely at the example code, and the code in the interactive window to see what to fix.</span></span>

    > <span data-ttu-id="bfa7c-121">这样做有助于了解 C# 代码结构。</span><span class="sxs-lookup"><span data-stu-id="bfa7c-121">That exercise will help you learn the structure of C# code.</span></span>


    <span data-ttu-id="bfa7c-122">第一个示例展示了 `if` 和布尔类型的用途。</span><span class="sxs-lookup"><span data-stu-id="bfa7c-122">This first sample shows the power of `if` and boolean types.</span></span> <span data-ttu-id="bfa7c-123">布尔变量可以包含下列两个值之一：`true` 或 `false`。</span><span class="sxs-lookup"><span data-stu-id="bfa7c-123">A *boolean* is a variable that can have one of two values: `true` or `false`.</span></span> <span data-ttu-id="bfa7c-124">C# 为布尔变量定义了特殊类型 `bool`。</span><span class="sxs-lookup"><span data-stu-id="bfa7c-124">C# defines a special type, `bool` for boolean variables.</span></span> <span data-ttu-id="bfa7c-125">`if` 语句检查 `bool` 的值。</span><span class="sxs-lookup"><span data-stu-id="bfa7c-125">The `if` statement checks the value of a `bool`.</span></span> <span data-ttu-id="bfa7c-126">如果值为 `true`，执行 `if` 后面的语句。</span><span class="sxs-lookup"><span data-stu-id="bfa7c-126">When the value is `true`, the statement following the `if` executes.</span></span> <span data-ttu-id="bfa7c-127">否则，跳过上述语句。</span><span class="sxs-lookup"><span data-stu-id="bfa7c-127">Otherwise, it is skipped.</span></span>


    <span data-ttu-id="bfa7c-128">这种检查条件并根据条件执行语句的过程非常强大。</span><span class="sxs-lookup"><span data-stu-id="bfa7c-128">This process of checking conditions and executing statements based on those conditions is very powerful.</span></span> <span data-ttu-id="bfa7c-129">接下来，将进一步探索。</span><span class="sxs-lookup"><span data-stu-id="bfa7c-129">Let's explore more.</span></span>


    > [!NOTE]

    > <span data-ttu-id="bfa7c-130">此联机编码体验处于预览模式。</span><span class="sxs-lookup"><span data-stu-id="bfa7c-130">This online coding experience is in preview mode.</span></span> <span data-ttu-id="bfa7c-131">如果遇到问题，请[在 dotnet/try 存储库上](https://github.com/dotnet/try/issues)进行报告。</span><span class="sxs-lookup"><span data-stu-id="bfa7c-131">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="bfa7c-132">让 if 和 else 完美配合</span><span class="sxs-lookup"><span data-stu-id="bfa7c-132">Make if and else work together</span></span>
  durationInMinutes: 10
  content: "\n<span data-ttu-id=\"bfa7c-133\">若要执行 true 和 false 分支中的不同代码，请创建在条件为 false 时执行的 `else` 分支。</span><span class=\"sxs-lookup\"><span data-stu-id=\"bfa7c-133\">To execute different code in both the true and false branches, you create an `else` branch that executes when the condition is false.</span></span> <span data-ttu-id=\"bfa7c-134\">试运行以下代码：</span><span class=\"sxs-lookup\"><span data-stu-id=\"bfa7c-134\">Try this:</span></span>\n\n```csharp\nint a = 5;\nint b = 3;\nif (a + b > 10)\n    Console.WriteLine(\"The answer is greater than 10\");\nelse\n    Console.WriteLine(\"The answer is not greater than 10\");\n```\n\n<span data-ttu-id=\"bfa7c-135\">只有当条件的测试结果为 `false` 时，才执行 `else` 关键字后面的语句。</span><span class=\"sxs-lookup\"><span data-stu-id=\"bfa7c-135\">The statement following the `else` keyword executes only when the condition being tested is `false`.</span></span> <span data-ttu-id=\"bfa7c-136\">将 `if`、`else` 与布尔条件相结合，可以实现所需的一切目标。</span><span class=\"sxs-lookup\"><span data-stu-id=\"bfa7c-136\">Combining `if` and `else` with boolean conditions provides all the power you need.</span></span>\n\n> [!IMPORTANT]\n> <span data-ttu-id=\"bfa7c-137\">`if` 和 `else` 语句下的缩进是为了方便读者阅读。</span><span class=\"sxs-lookup\"><span data-stu-id=\"bfa7c-137\">The indentation under the `if` and `else` statements is for human readers.</span></span>\n> <span data-ttu-id=\"bfa7c-138\">C# 语言忽略缩进或空格。</span><span class=\"sxs-lookup\"><span data-stu-id=\"bfa7c-138\">The C# language doesn't treat indentation or white space as significant.</span></span>\n> <span data-ttu-id=\"bfa7c-139\">`if` 或 `else` 关键字后面的语句根据条件决定是否执行。</span><span class=\"sxs-lookup\"><span data-stu-id=\"bfa7c-139\">The statement following the `if` or `else` keyword will be executed based on the condition.</span></span> <span data-ttu-id=\"bfa7c-140\">本教程中的所有示例都遵循了常见做法，根据语句的控制流缩进代码行。</span><span class=\"sxs-lookup\"><span data-stu-id=\"bfa7c-140\">All the samples in this tutorial follow a common practice to indent lines based on the control flow of statements.</span></span>\n\n<span data-ttu-id=\"bfa7c-141\">由于缩进会被忽略，因此需要使用 `{` 和 `}`，指明要在根据条件决定是否执行的代码块中添加多个语句。</span><span class=\"sxs-lookup\"><span data-stu-id=\"bfa7c-141\">Because indentation is not significant, you need to use `{` and `}` to indicate when you want more than one statement to be part of the block that executes conditionally.</span></span> <span data-ttu-id=\"bfa7c-142\">C# 程序员通常会对所有 `if` 和 `else` 子句使用这些大括号。</span><span class=\"sxs-lookup\"><span data-stu-id=\"bfa7c-142\">C# programmers typically use those braces on all `if` and `else` clauses.</span></span> <span data-ttu-id=\"bfa7c-143\">以下示例与刚刚创建的示例相同。</span><span class=\"sxs-lookup\"><span data-stu-id=\"bfa7c-143\">The following example is the same as what you just created.</span></span> <span data-ttu-id=\"bfa7c-144\">试运行看看。</span><span class=\"sxs-lookup\"><span data-stu-id=\"bfa7c-144\">Try it.</span></span>\n\n```csharp\nint a = 5;\nint b = 3;\nif (a + b > 10)\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n}\n```\n\n> [!TIP]\n> <span data-ttu-id=\"bfa7c-145\">在本教程的其余部分中，代码示例全都遵循公认做法，添加了大括号。</span><span class=\"sxs-lookup\"><span data-stu-id=\"bfa7c-145\">Through the rest of this tutorial, the code samples all include the braces, following accepted practices.</span></span>\n\n<span data-ttu-id=\"bfa7c-146\">可以测试更复杂的条件：</span><span class=\"sxs-lookup\"><span data-stu-id=\"bfa7c-146\">You can test more complicated conditions:</span></span>\n\n```csharp\nint a = 5;\nint b = 3;\nint c = 4;\nif ((a + b + c > 10) && (a == b))\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n    Console.WriteLine(\"And the first number is equal to the second\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n    Console.WriteLine(\"Or the first number is not equal to the second\");\n}\n```\n\n<span data-ttu-id=\"bfa7c-147\">`==` 符号执行相等测试。</span><span class=\"sxs-lookup\"><span data-stu-id=\"bfa7c-147\">The `==` symbol tests for *equality*.</span></span> <span data-ttu-id=\"bfa7c-148\">使用 `==` 将相等测试与赋值测试区分开来，如在 `a = 5` 中所见。</span><span class=\"sxs-lookup\"><span data-stu-id=\"bfa7c-148\">Using `==` distinguishes the test for equality from assignment, which you saw in `a = 5`.</span></span>\n\n<span data-ttu-id=\"bfa7c-149\">`&&` 表示“且”。</span><span class=\"sxs-lookup\"><span data-stu-id=\"bfa7c-149\">The `&&` represents \"and\".</span></span> <span data-ttu-id=\"bfa7c-150\">也就是说，两个条件必须都为 true，才能执行 true 分支中的语句。</span><span class=\"sxs-lookup\"><span data-stu-id=\"bfa7c-150\">It means both conditions must be true to execute the statement in the true branch.</span></span>  <span data-ttu-id=\"bfa7c-151\">这些示例还表明，可以在每个条件分支中添加多个语句，前提是将它们用 `{` 和 `}` 括住。</span><span class=\"sxs-lookup\"><span data-stu-id=\"bfa7c-151\">These examples also show that you can have multiple statements in each conditional branch, provided you enclose them in `{` and `}`.</span></span>\n\n<span data-ttu-id=\"bfa7c-152\">还可以使用 `||` 表示“或”：</span><span class=\"sxs-lookup\"><span data-stu-id=\"bfa7c-152\">You can also use  `||` to represent \"or\":</span></span>\n\n```csharp\nint a = 5;\nint b = 3;\nint c = 4;\nif ((a + b + c > 10) || (a == b))\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n    Console.WriteLine(\"Or the first number is equal to the second\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n    Console.WriteLine(\"And the first number is not equal to the second\");\n}\n```\n\n<span data-ttu-id=\"bfa7c-153\">修改 `a`、`b` 和 `c` 的值，并在 `&&` 和 `||` 之间切换浏览。</span><span class=\"sxs-lookup\"><span data-stu-id=\"bfa7c-153\">Modify the values of `a`, `b`, and `c` and switch between `&&` and `||` to explore.</span></span> <span data-ttu-id=\"bfa7c-154\">你将进一步了解 `&&` 和 `||` 运算符的工作原理。</span><span class=\"sxs-lookup\"><span data-stu-id=\"bfa7c-154\">You'll gain more understanding of how the `&&` and `||` operators work.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"bfa7c-155\">此联机编码体验处于预览模式。</span><span class=\"sxs-lookup\"><span data-stu-id=\"bfa7c-155\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"bfa7c-156\">如果遇到问题，请[在 dotnet/try 存储库上](https://github.com/dotnet/try/issues)进行报告。</span><span class=\"sxs-lookup\"><span data-stu-id=\"bfa7c-156\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: <span data-ttu-id="bfa7c-157">使用循环重复执行运算</span><span class="sxs-lookup"><span data-stu-id="bfa7c-157">Use loops to repeat operations</span></span>
  durationInMinutes: 6
  content: >
    <span data-ttu-id="bfa7c-158">创建更大程序时，需要考虑的另一个重要概念是循环。</span><span class="sxs-lookup"><span data-stu-id="bfa7c-158">Another important concept to create larger programs is **loops**.</span></span> <span data-ttu-id="bfa7c-159">使用循环，可以重复执行要多次执行的语句。</span><span class="sxs-lookup"><span data-stu-id="bfa7c-159">You'll use loops to repeat statements that you want executed more than once.</span></span> <span data-ttu-id="bfa7c-160">在交互式窗口中，试运行以下代码：</span><span class="sxs-lookup"><span data-stu-id="bfa7c-160">Try this code in the interactive window:</span></span>


    ```csharp

    int counter = 0;

    while (counter < 10)

    {
      Console.WriteLine($"Hello World! The counter is {counter}");
      counter++;
    }

    ```


    <span data-ttu-id="bfa7c-161">`while` 语句检查条件，并执行 `while` 后面的语句。</span><span class="sxs-lookup"><span data-stu-id="bfa7c-161">The `while` statement checks a condition and executes the statement following the `while`.</span></span> <span data-ttu-id="bfa7c-162">除非条件为 false，否则它会重复检查条件，并重复执行这些语句。</span><span class="sxs-lookup"><span data-stu-id="bfa7c-162">It will repeat checking the condition and executing those statements until the condition is false.</span></span>


    <span data-ttu-id="bfa7c-163">此示例新引入了另外一个运算符。</span><span class="sxs-lookup"><span data-stu-id="bfa7c-163">There's one other new operator in this example.</span></span> <span data-ttu-id="bfa7c-164">`counter` 变量后面的 `++` 是增量运算符。</span><span class="sxs-lookup"><span data-stu-id="bfa7c-164">The `++` after the `counter` variable is the **increment** operator.</span></span> <span data-ttu-id="bfa7c-165">它负责用计数器值加 1，并将计算后的值存储在计数器变量中。</span><span class="sxs-lookup"><span data-stu-id="bfa7c-165">It adds 1 to the value of counter, and stores that value in the counter variable.</span></span>


    > [!IMPORTANT]

    > <span data-ttu-id="bfa7c-166">请确保 `while` 循环条件在代码执行时确实能够切换为 false。</span><span class="sxs-lookup"><span data-stu-id="bfa7c-166">Make sure that the `while` loop condition does switch to false as you execute the code.</span></span> <span data-ttu-id="bfa7c-167">否则，创建的就是无限循环，即程序永不结束。</span><span class="sxs-lookup"><span data-stu-id="bfa7c-167">Otherwise, you create an **infinite loop** where your program never ends.</span></span> <span data-ttu-id="bfa7c-168">我们就不进行演示了，因为运行代码的引擎将会超时，程序也不会有任何输出。</span><span class="sxs-lookup"><span data-stu-id="bfa7c-168">Let's not demonstrate that, because the engine that runs your code will time out and you'll see no output from your program.</span></span>


    <span data-ttu-id="bfa7c-169">`while` 循环先测试条件，然后再执行 `while` 后面的代码。</span><span class="sxs-lookup"><span data-stu-id="bfa7c-169">The `while` loop tests the condition before executing the code following the `while`.</span></span> <span data-ttu-id="bfa7c-170">`do` ... `while` 循环先执行代码，然后再检查条件。</span><span class="sxs-lookup"><span data-stu-id="bfa7c-170">The `do` ... `while` loop executes the code first, and then checks the condition.</span></span> <span data-ttu-id="bfa7c-171">代码如下所示：</span><span class="sxs-lookup"><span data-stu-id="bfa7c-171">It looks like this:</span></span>


    ```csharp

    int counter = 0;

    do

    {
      Console.WriteLine($"Hello World! The counter is {counter}");
      counter++;
    } while (counter < 10);

    ```


    <span data-ttu-id="bfa7c-172">这个 `do` 循环和前面的 `while` 循环的工作原理相同。</span><span class="sxs-lookup"><span data-stu-id="bfa7c-172">This `do` loop and the earlier `while` loop work the same.</span></span>


    <span data-ttu-id="bfa7c-173">接下来，将继续介绍最后一个循环语句。</span><span class="sxs-lookup"><span data-stu-id="bfa7c-173">Let's move on to one last loop statement.</span></span>


    > [!NOTE]

    > <span data-ttu-id="bfa7c-174">此联机编码体验处于预览模式。</span><span class="sxs-lookup"><span data-stu-id="bfa7c-174">This online coding experience is in preview mode.</span></span> <span data-ttu-id="bfa7c-175">如果遇到问题，请[在 dotnet/try 存储库上](https://github.com/dotnet/try/issues)进行报告。</span><span class="sxs-lookup"><span data-stu-id="bfa7c-175">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="bfa7c-176">使用 for 循环</span><span class="sxs-lookup"><span data-stu-id="bfa7c-176">Work with the for loop</span></span>
  durationInMinutes: 5
  content: >
    <span data-ttu-id="bfa7c-177">C# 代码中的另一常见循环语句是 `for` 循环。</span><span class="sxs-lookup"><span data-stu-id="bfa7c-177">Another common loop statement that you'll see in C# code is the `for` loop.</span></span> <span data-ttu-id="bfa7c-178">在交互式窗口中，试运行以下代码：</span><span class="sxs-lookup"><span data-stu-id="bfa7c-178">Try this code in the interactive window:</span></span>


    ```csharp

    for(int counter = 0; counter < 10; counter++)

    {
      Console.WriteLine($"Hello World! The counter is {counter}");
    }

    ```


    <span data-ttu-id="bfa7c-179">此循环的工作原理与已用过的 `while` 循环和 `do` 循环相同。</span><span class="sxs-lookup"><span data-stu-id="bfa7c-179">This does the same work as the `while` loop and the `do` loop you've already used.</span></span> <span data-ttu-id="bfa7c-180">`for` 语句包含三个控制具体工作方式的部分。</span><span class="sxs-lookup"><span data-stu-id="bfa7c-180">The `for` statement has three parts that control how it works.</span></span>


    <span data-ttu-id="bfa7c-181">第一部分是 for 初始值设定项：`int counter = 0;` 声明 `counter` 是循环变量，并将它的初始值设置为 `0`。</span><span class="sxs-lookup"><span data-stu-id="bfa7c-181">The first part is the **for initializer**: `int counter = 0;` declares that `counter` is the loop variable, and sets its initial value to `0`.</span></span>


    <span data-ttu-id="bfa7c-182">中间部分是 for 条件：`counter < 10` 声明只要计数器值小于 10，此 `for` 循环就会继续执行。</span><span class="sxs-lookup"><span data-stu-id="bfa7c-182">The middle part is the **for condition**: `counter < 10` declares that this `for` loop continues to execute as long as the value of counter is less than 10.</span></span>


    <span data-ttu-id="bfa7c-183">最后一部分是 for 迭代器：`counter++` 指定在执行 `for` 语句后面的代码块后，如何修改循环变量。</span><span class="sxs-lookup"><span data-stu-id="bfa7c-183">The final part is the **for iterator**: `counter++` specifies how to modify the loop variable after executing the block following the `for` statement.</span></span> <span data-ttu-id="bfa7c-184">在此示例中，它指定 `counter` 应在代码块每次执行时递增 1。</span><span class="sxs-lookup"><span data-stu-id="bfa7c-184">Here, it specifies that `counter` should be incremented by 1 each time the block executes.</span></span>


    <span data-ttu-id="bfa7c-185">亲自试运行这些部分的代码。</span><span class="sxs-lookup"><span data-stu-id="bfa7c-185">Experiment with these yourself.</span></span> <span data-ttu-id="bfa7c-186">试着执行下列两项操作：</span><span class="sxs-lookup"><span data-stu-id="bfa7c-186">Try each of the following:</span></span>


    - <span data-ttu-id="bfa7c-187">将初始值设定项更改为其他初始值。</span><span class="sxs-lookup"><span data-stu-id="bfa7c-187">Change the initializer to start at a different value.</span></span>

    - <span data-ttu-id="bfa7c-188">将结束条件设定项更改为其他值。</span><span class="sxs-lookup"><span data-stu-id="bfa7c-188">Change the condition to stop at a different value.</span></span>


    <span data-ttu-id="bfa7c-189">完成后，继续利用所学知识，试着自己编写一些代码。</span><span class="sxs-lookup"><span data-stu-id="bfa7c-189">When you're done, let's move on to write some code yourself to use what you've learned.</span></span>


    > [!NOTE]

    > <span data-ttu-id="bfa7c-190">此联机编码体验处于预览模式。</span><span class="sxs-lookup"><span data-stu-id="bfa7c-190">This online coding experience is in preview mode.</span></span> <span data-ttu-id="bfa7c-191">如果遇到问题，请[在 dotnet/try 存储库上](https://github.com/dotnet/try/issues)进行报告。</span><span class="sxs-lookup"><span data-stu-id="bfa7c-191">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="bfa7c-192">结合使用分支和循环</span><span class="sxs-lookup"><span data-stu-id="bfa7c-192">Combine branches and loops</span></span>
  durationInMinutes: 12
  content: >
    <span data-ttu-id="bfa7c-193">支持，大家已了解 C# 语言中的 `if` 语句和循环构造。看看能否编写 C# 代码，计算 1 到 20 中所有可被 3 整除的整数的总和。</span><span class="sxs-lookup"><span data-stu-id="bfa7c-193">Now that you've seen the `if` statement and the looping constructs in the C# language, see if you can write C# code to find the sum of all integers 1 through 20 that are divisible by 3.</span></span>  <span data-ttu-id="bfa7c-194">下面提供了一些提示：</span><span class="sxs-lookup"><span data-stu-id="bfa7c-194">Here are a few hints:</span></span>


    - <span data-ttu-id="bfa7c-195">`%` 运算符可用于获取除法运算的余数。</span><span class="sxs-lookup"><span data-stu-id="bfa7c-195">The `%` operator gives you the remainder of a division operation.</span></span>

    - <span data-ttu-id="bfa7c-196">`if` 语句中的条件可用于判断是否应将数字计入总和。</span><span class="sxs-lookup"><span data-stu-id="bfa7c-196">The `if` statement gives you the condition to see if a number should be part of the sum.</span></span>

    - <span data-ttu-id="bfa7c-197">`for` 循环有助于对 1 到 20 中的所有数字重复执行一系列步骤。</span><span class="sxs-lookup"><span data-stu-id="bfa7c-197">The `for` loop can help you repeat a series of steps for all the numbers 1 through 20.</span></span>


    <span data-ttu-id="bfa7c-198">亲自试一试吧。</span><span class="sxs-lookup"><span data-stu-id="bfa7c-198">Try it yourself.</span></span> <span data-ttu-id="bfa7c-199">然后，看看自己是怎么做到的。</span><span class="sxs-lookup"><span data-stu-id="bfa7c-199">Then check how you did.</span></span> <span data-ttu-id="bfa7c-200">提示：你应获取的答案为 63。</span><span class="sxs-lookup"><span data-stu-id="bfa7c-200">As a hint, you should get 63 for an answer.</span></span>


    > [!NOTE]

    > <span data-ttu-id="bfa7c-201">此联机编码体验处于预览模式。</span><span class="sxs-lookup"><span data-stu-id="bfa7c-201">This online coding experience is in preview mode.</span></span> <span data-ttu-id="bfa7c-202">如果遇到问题，请[在 dotnet/try 存储库上](https://github.com/dotnet/try/issues)进行报告。</span><span class="sxs-lookup"><span data-stu-id="bfa7c-202">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="bfa7c-203">完成挑战</span><span class="sxs-lookup"><span data-stu-id="bfa7c-203">Complete challenge</span></span>
  durationInMinutes: 1
  content: >
    <span data-ttu-id="bfa7c-204">最后是否生成如下代码？</span><span class="sxs-lookup"><span data-stu-id="bfa7c-204">Did you come up with something like this?</span></span>


    ```csharp

    int sum = 0;

    for (int number = 1; number < 21; number++)

    {
      if (number % 3 == 0)
      {
        sum = sum + number;
      }
    }

    Console.WriteLine($"The sum is {sum}");

    ```


    > [!NOTE]

    > <span data-ttu-id="bfa7c-205">此联机编码体验处于预览模式。</span><span class="sxs-lookup"><span data-stu-id="bfa7c-205">This online coding experience is in preview mode.</span></span> <span data-ttu-id="bfa7c-206">如果遇到问题，请[在 dotnet/try 存储库上](https://github.com/dotnet/try/issues)进行报告。</span><span class="sxs-lookup"><span data-stu-id="bfa7c-206">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="bfa7c-207">祝贺你！</span><span class="sxs-lookup"><span data-stu-id="bfa7c-207">Congratulations!</span></span>
  content: >-
    <span data-ttu-id="bfa7c-208">已完成“分支和循环”交互式教程。</span><span class="sxs-lookup"><span data-stu-id="bfa7c-208">You've completed the "branches and loops" interactive tutorial.</span></span> <span data-ttu-id="bfa7c-209">可以单击下方的**列表集合**链接开始下一个交互式教程，也可以访问 [.NET 站点](https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro)下载 .NET Core SDK，在计算机上创建项目，并继续编码。</span><span class="sxs-lookup"><span data-stu-id="bfa7c-209">You can click the **list collection** link below to start the next interactive tutorial, or you can visit the [.NET site](https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro) to download the .NET Core SDK, create a project on your machine, and keep coding.</span></span> <span data-ttu-id="bfa7c-210">请通过“后续步骤”部分返回到这些教程。</span><span class="sxs-lookup"><span data-stu-id="bfa7c-210">The "Next steps" section brings you back to these tutorials.</span></span>


    <span data-ttu-id="bfa7c-211">若要详细了解这些概念，请参阅下列主题：</span><span class="sxs-lookup"><span data-stu-id="bfa7c-211">You can learn more about these concepts in these topics:</span></span>


    - [<span data-ttu-id="bfa7c-212">If 和 else 语句</span><span class="sxs-lookup"><span data-stu-id="bfa7c-212">If and else statement</span></span>](../../language-reference/keywords/if-else.md)

    - [<span data-ttu-id="bfa7c-213">While 语句</span><span class="sxs-lookup"><span data-stu-id="bfa7c-213">While statement</span></span>](../../language-reference/keywords/while.md)

    - [<span data-ttu-id="bfa7c-214">Do 语句</span><span class="sxs-lookup"><span data-stu-id="bfa7c-214">Do statement</span></span>](../../language-reference/keywords/do.md)

    - [<span data-ttu-id="bfa7c-215">For 语句</span><span class="sxs-lookup"><span data-stu-id="bfa7c-215">For statement</span></span>](../../language-reference/keywords/for.md)
