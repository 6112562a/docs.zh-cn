### YamlMime:Tutorial
title: <span data-ttu-id="f440f-101">Hello World - C# 交互式教程简介</span><span class="sxs-lookup"><span data-stu-id="f440f-101">Hello World - Introduction to C# interactive C# tutorial</span></span>
metadata:
  title: Hello World - C# 交互式教程简介
  description: 在本教程中，读者将使用浏览器通过交互方式了解 C#。 读者可以直接在浏览器中编写 C# 代码，并查看代码编译和运行结果。
  audience: Developer
  level: Beginner
  ms.date: 08/24/2018
  nextTutorialHref: numbers-in-csharp.yml
  nextTutorialTitle: <span data-ttu-id="f440f-105">C# 中的数字</span><span class="sxs-lookup"><span data-stu-id="f440f-105">Numbers in C#</span></span>
  displayType: two-column
  interactive: csharp
  ms.custom: mvc
  ms.openlocfilehash: 36254062835b9ab70ba470f6286b7515003dec11
  ms.sourcegitcommit: 205b9a204742e9c77256d43ac9d94c3f82909808
  ms.translationtype: HT
  ms.contentlocale: zh-CN
  ms.lasthandoff: 09/10/2019
  ms.locfileid: "70850796"
items:
- durationInMinutes: 1
  content: >
    <span data-ttu-id="f440f-106">本教程通过交互方式介绍了 C#，读者可以使用浏览器编写 C#，并查看代码编译和运行结果。</span><span class="sxs-lookup"><span data-stu-id="f440f-106">This tutorial teaches you C# interactively, using your browser to write C# and see the results of compiling and running your code.</span></span> <span data-ttu-id="f440f-107">具体包含一系列课程，最先介绍的就是“Hello World”程序。</span><span class="sxs-lookup"><span data-stu-id="f440f-107">It contains a series of lessons that begin with a "Hello World" program.</span></span> <span data-ttu-id="f440f-108">这些课程介绍了 C# 语言的基础知识。</span><span class="sxs-lookup"><span data-stu-id="f440f-108">These lessons teach you the fundamentals of the C# language.</span></span>
- title: <span data-ttu-id="f440f-109">运行首个 C# 程序</span><span class="sxs-lookup"><span data-stu-id="f440f-109">Run your first C# program</span></span>
  durationInMinutes: 2
  content: >
    <span data-ttu-id="f440f-110">在交互式窗口中，运行以下代码。</span><span class="sxs-lookup"><span data-stu-id="f440f-110">Run the following code in the interactive window.</span></span> <span data-ttu-id="f440f-111">为此，请在交互式窗口中键入以下代码块，再单击“运行”按钮：</span><span class="sxs-lookup"><span data-stu-id="f440f-111">To do that, type the following code block in the interactive window and click the **Run** button:</span></span>


    ```csharp

    Console.WriteLine("Hello World!");

    ```


    <span data-ttu-id="f440f-112">祝贺你！</span><span class="sxs-lookup"><span data-stu-id="f440f-112">Congratulations!</span></span> <span data-ttu-id="f440f-113">已运行首个 C# 程序。</span><span class="sxs-lookup"><span data-stu-id="f440f-113">You've run your first C# program.</span></span> <span data-ttu-id="f440f-114">这是一个简单程序，可输出消息“Hello World!”。</span><span class="sxs-lookup"><span data-stu-id="f440f-114">It's a simple program that prints the message "Hello World!".</span></span> <span data-ttu-id="f440f-115">它使用 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 方法打印此消息。</span><span class="sxs-lookup"><span data-stu-id="f440f-115">It used the <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> method to print that message.</span></span> <span data-ttu-id="f440f-116">`Console` 是表示控制台窗口的类型。</span><span class="sxs-lookup"><span data-stu-id="f440f-116">`Console` is a type that represents the console window.</span></span> <span data-ttu-id="f440f-117">`WriteLine` 是 `Console` 类型的方法，负责将文本行打印到文本控制台。</span><span class="sxs-lookup"><span data-stu-id="f440f-117">`WriteLine` is a method of the `Console` type that prints a line of text to that text console.</span></span>


    <span data-ttu-id="f440f-118">接下来，将继续进一步探索。</span><span class="sxs-lookup"><span data-stu-id="f440f-118">Let's move on and explore more.</span></span> <span data-ttu-id="f440f-119">本课程的其余部分探索了如何使用在 C# 中表示文本的 `string` 类型。</span><span class="sxs-lookup"><span data-stu-id="f440f-119">The rest of this lesson explores working with the `string` type, which represents text in C#.</span></span> <span data-ttu-id="f440f-120">与 `Console` 类型一样，`string` 类型也包含方法。</span><span class="sxs-lookup"><span data-stu-id="f440f-120">Like the `Console` type, the `string` type has methods.</span></span> <span data-ttu-id="f440f-121">`string` 方法处理的是文本。</span><span class="sxs-lookup"><span data-stu-id="f440f-121">The `string` methods work with text.</span></span>


    > [!NOTE]

    > <span data-ttu-id="f440f-122">此联机编码体验处于预览模式。</span><span class="sxs-lookup"><span data-stu-id="f440f-122">This online coding experience is in preview mode.</span></span> <span data-ttu-id="f440f-123">如果遇到问题，请[在 dotnet/try 存储库上](https://github.com/dotnet/try/issues)进行报告。</span><span class="sxs-lookup"><span data-stu-id="f440f-123">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="f440f-124">声明和使用变量</span><span class="sxs-lookup"><span data-stu-id="f440f-124">Declare and use variables</span></span>
  durationInMinutes: 3
  content: >
    <span data-ttu-id="f440f-125">首个程序在屏幕上打印出了 `string`“Hello World!”</span><span class="sxs-lookup"><span data-stu-id="f440f-125">Your first program printed the `string` "Hello World!"</span></span> <span data-ttu-id="f440f-126">。</span><span class="sxs-lookup"><span data-stu-id="f440f-126">on the screen.</span></span>


    > [!TIP]

    > <span data-ttu-id="f440f-127">在探索 C#（或任何编程语言）的过程中，可能会在编写代码时犯错。</span><span class="sxs-lookup"><span data-stu-id="f440f-127">As you explore C# (or any programming language), you'll make mistakes when you write code.</span></span> <span data-ttu-id="f440f-128">编译器会发现并报告这些错误。</span><span class="sxs-lookup"><span data-stu-id="f440f-128">The **compiler** will find those errors and report them to you.</span></span> <span data-ttu-id="f440f-129">如果输出中有错误消息，请仔细比对示例代码和交互式窗口中的代码，看看要纠正哪些代码。</span><span class="sxs-lookup"><span data-stu-id="f440f-129">When the output contains error messages, look closely at the example code, and the code in the interactive window to see what to fix.</span></span>

    > <span data-ttu-id="f440f-130">这样做有助于了解 C# 代码结构。</span><span class="sxs-lookup"><span data-stu-id="f440f-130">That exercise will help you learn the structure of C# code.</span></span>


    <span data-ttu-id="f440f-131">首个程序只能打印一条消息。</span><span class="sxs-lookup"><span data-stu-id="f440f-131">Your first program is limited to printing one message.</span></span> <span data-ttu-id="f440f-132">可以使用变量编写更实用的程序。</span><span class="sxs-lookup"><span data-stu-id="f440f-132">You can write more useful programs by using **variables**.</span></span> <span data-ttu-id="f440f-133">借助变量符号，可以使用不同的值运行同一代码。</span><span class="sxs-lookup"><span data-stu-id="f440f-133">A **variable** is a symbol you can use to run the same code with different values.</span></span> <span data-ttu-id="f440f-134">试一试吧！</span><span class="sxs-lookup"><span data-stu-id="f440f-134">Let's try it!</span></span> <span data-ttu-id="f440f-135">将在交互式窗口中已编写的代码替换为以下代码：</span><span class="sxs-lookup"><span data-stu-id="f440f-135">Replace the code you've written in the interactive window with the following code:</span></span>


    ```csharp

    string aFriend = "Bill";

    Console.WriteLine(aFriend);

    ```


    <span data-ttu-id="f440f-136">第一行代码声明变量 `aFriend`，并为它分配值“Bill”。</span><span class="sxs-lookup"><span data-stu-id="f440f-136">The first line declares a variable, `aFriend` and assigns it a value, "Bill".</span></span> <span data-ttu-id="f440f-137">第二行代码打印出姓名。</span><span class="sxs-lookup"><span data-stu-id="f440f-137">The second line prints out the name.</span></span>


    <span data-ttu-id="f440f-138">可以向声明的任何变量分配不同的值。</span><span class="sxs-lookup"><span data-stu-id="f440f-138">You can assign different values to any variable you declare.</span></span> <span data-ttu-id="f440f-139">可以将姓名更改为自己一个好友的姓名。</span><span class="sxs-lookup"><span data-stu-id="f440f-139">You can change the name to one of your friends.</span></span> <span data-ttu-id="f440f-140">在交互式窗口中已添加的代码后面，添加以下两行代码：</span><span class="sxs-lookup"><span data-stu-id="f440f-140">Add these two lines in the interactive window following the code you've already added:</span></span>


    ```csharp

    aFriend = "Maira";

    Console.WriteLine(aFriend);

    ```


    <span data-ttu-id="f440f-141">可以看到，同一行代码根据 `aFriend` 变量中存储的值，打印两条不同的消息。</span><span class="sxs-lookup"><span data-stu-id="f440f-141">Notice that the same line of code prints two different messages, based on the value stored in the `aFriend` variable.</span></span>


    <span data-ttu-id="f440f-142">可能还会注意到，最后两条消息中没有“Hello”一词。</span><span class="sxs-lookup"><span data-stu-id="f440f-142">You may have also noticed that the word "Hello" was missing in the last two messages.</span></span> <span data-ttu-id="f440f-143">现在就来解决一下这个问题。</span><span class="sxs-lookup"><span data-stu-id="f440f-143">Let's fix that now.</span></span>  <span data-ttu-id="f440f-144">将负责打印消息的代码行修改为以下代码：</span><span class="sxs-lookup"><span data-stu-id="f440f-144">Modify the lines that print the message to the following:</span></span>


    ```csharp

    Console.WriteLine("Hello " + aFriend);

    ```


    <span data-ttu-id="f440f-145">再次单击“运行”，看看结果如何。</span><span class="sxs-lookup"><span data-stu-id="f440f-145">Click **Run** again to see the results.</span></span>


    <span data-ttu-id="f440f-146">你一直在使用 `+` 从变量和常量字符串构建字符串。</span><span class="sxs-lookup"><span data-stu-id="f440f-146">You've been using `+` to build strings from **variables** and **constant** strings.</span></span> <span data-ttu-id="f440f-147">但还有一种更好的方法。</span><span class="sxs-lookup"><span data-stu-id="f440f-147">There's a better way.</span></span>

    <span data-ttu-id="f440f-148">你可以在 `{` 和 `}` 字符之间放置一个变量，以告诉 C# 将该文本替换为此变量的值。</span><span class="sxs-lookup"><span data-stu-id="f440f-148">You can place a variable between `{` and `}` characters to tell C# to replace that text with the value of the variable.</span></span>


    <span data-ttu-id="f440f-149">这称为[字符串内插](../../language-reference/tokens/interpolated.md)。</span><span class="sxs-lookup"><span data-stu-id="f440f-149">This is called [String interpolation](../../language-reference/tokens/interpolated.md).</span></span>


    <span data-ttu-id="f440f-150">如果在字符串的左引号前添加 `$`，则可以在大括号之间的字符串内包括变量，如 `aFriend`。</span><span class="sxs-lookup"><span data-stu-id="f440f-150">If you add a `$` before the opening quote of the string, you can then include variables, like `aFriend`, inside the string between curly braces.</span></span> <span data-ttu-id="f440f-151">试一试：</span><span class="sxs-lookup"><span data-stu-id="f440f-151">Give it a try:</span></span>



    ```csharp

    Console.WriteLine($"Hello {aFriend}");

    ```


    <span data-ttu-id="f440f-152">再次单击“运行”，看看结果如何。</span><span class="sxs-lookup"><span data-stu-id="f440f-152">Click **Run** again to see the results.</span></span> <span data-ttu-id="f440f-153">消息应该是“Hello Maira”，而不是“Hello {aFriend}”。</span><span class="sxs-lookup"><span data-stu-id="f440f-153">Instead of "Hello {aFriend}", the message should be "Hello Maira".</span></span>


    > [!NOTE]

    > <span data-ttu-id="f440f-154">此联机编码体验处于预览模式。</span><span class="sxs-lookup"><span data-stu-id="f440f-154">This online coding experience is in preview mode.</span></span> <span data-ttu-id="f440f-155">如果遇到问题，请[在 dotnet/try 存储库上](https://github.com/dotnet/try/issues)进行报告。</span><span class="sxs-lookup"><span data-stu-id="f440f-155">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="f440f-156">使用字符串</span><span class="sxs-lookup"><span data-stu-id="f440f-156">Work with strings</span></span>
  durationInMinutes: 5
  content: >
    <span data-ttu-id="f440f-157">上次编辑是对字符串用途的初探。</span><span class="sxs-lookup"><span data-stu-id="f440f-157">Your last edit was our first look at what you can do with strings.</span></span> <span data-ttu-id="f440f-158">接下来，将进一步探索。</span><span class="sxs-lookup"><span data-stu-id="f440f-158">Let's explore more.</span></span>


    <span data-ttu-id="f440f-159">不仅限于使用大括号之间的单个变量。</span><span class="sxs-lookup"><span data-stu-id="f440f-159">You're not limited to a single variable between the curly braces.</span></span> <span data-ttu-id="f440f-160">试运行以下代码：</span><span class="sxs-lookup"><span data-stu-id="f440f-160">Try this:</span></span>


    ```csharp

    string firstFriend = "Maria";

    string secondFriend = "Sage";

    Console.WriteLine($"My friends are {firstFriend} and {secondFriend}");

    ```


    <span data-ttu-id="f440f-161">当使用字符串进行更多探索时，你会发现字符串不仅仅是字母集合。</span><span class="sxs-lookup"><span data-stu-id="f440f-161">As you explore more with strings, you'll find that strings are more than a collection of letters.</span></span> <span data-ttu-id="f440f-162">你可以使用 `Length` 得出字符串的长度。</span><span class="sxs-lookup"><span data-stu-id="f440f-162">You can find the length of a string using `Length`.</span></span> <span data-ttu-id="f440f-163">`Length` 是字符串属性，可返回字符串中的字符数。</span><span class="sxs-lookup"><span data-stu-id="f440f-163">`Length` is a **property** of a string and it returns the number of characters in that string.</span></span> <span data-ttu-id="f440f-164">在交互式窗口的底部，添加以下代码：</span><span class="sxs-lookup"><span data-stu-id="f440f-164">Add the following code at the bottom of the interactive window:</span></span>


    ```csharp

    Console.WriteLine($"The name {firstFriend} has {firstFriend.Length} letters.");

    Console.WriteLine($"The name {secondFriend} has {secondFriend.Length} letters.");

    ```


    > [!TIP]

    > <span data-ttu-id="f440f-165">这是自行探索的良好时机。</span><span class="sxs-lookup"><span data-stu-id="f440f-165">This is a good time to explore on your own.</span></span> <span data-ttu-id="f440f-166">已了解到，`Console.WriteLine()` 将文本写入屏幕。</span><span class="sxs-lookup"><span data-stu-id="f440f-166">You've learned that `Console.WriteLine()` writes text to the screen.</span></span> <span data-ttu-id="f440f-167">也已学习了如何声明变量，以及如何串联字符串。</span><span class="sxs-lookup"><span data-stu-id="f440f-167">You've learned how to declare variables and concatenate strings together.</span></span> <span data-ttu-id="f440f-168">在交互式窗口中试一试吧。</span><span class="sxs-lookup"><span data-stu-id="f440f-168">Experiment in the interactive window.</span></span> <span data-ttu-id="f440f-169">该窗口有一个名为 IntelliSense 的功能，可为你提供操作建议。</span><span class="sxs-lookup"><span data-stu-id="f440f-169">The window has a feature called **IntelliSense** that makes suggestions for what you can do.</span></span> <span data-ttu-id="f440f-170">在 `firstFriend` 中的 `d` 后键入一个 `.`。</span><span class="sxs-lookup"><span data-stu-id="f440f-170">Type a `.` after the `d` in `firstFriend`.</span></span> <span data-ttu-id="f440f-171">你将看到可以使用的属性和方法的建议列表。</span><span class="sxs-lookup"><span data-stu-id="f440f-171">You'll see a list of suggestions for properties and methods you can use.</span></span>


    > [!NOTE]

    > <span data-ttu-id="f440f-172">此联机编码体验处于预览模式。</span><span class="sxs-lookup"><span data-stu-id="f440f-172">This online coding experience is in preview mode.</span></span> <span data-ttu-id="f440f-173">如果遇到问题，请[在 dotnet/try 存储库上](https://github.com/dotnet/try/issues)进行报告。</span><span class="sxs-lookup"><span data-stu-id="f440f-173">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="f440f-174">发掘字符串的更多精彩用途</span><span class="sxs-lookup"><span data-stu-id="f440f-174">Do more with strings</span></span>
  durationInMinutes: 5
  content: >
    <span data-ttu-id="f440f-175">一直在使用方法 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 打印消息。</span><span class="sxs-lookup"><span data-stu-id="f440f-175">You've been using a **method**, <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>, to print messages.</span></span> <span data-ttu-id="f440f-176">方法是用于实现某操作的代码块。</span><span class="sxs-lookup"><span data-stu-id="f440f-176">A **method** is a block of code that implements some action.</span></span> <span data-ttu-id="f440f-177">它有名称，这样就可以访问方法了。</span><span class="sxs-lookup"><span data-stu-id="f440f-177">It has a name, so you can access it.</span></span>


    <span data-ttu-id="f440f-178">假设字符串具有你不想显示的前导或尾随空格。</span><span class="sxs-lookup"><span data-stu-id="f440f-178">Suppose your strings have leading or trailing spaces that you don't want to display.</span></span> <span data-ttu-id="f440f-179">你希望剪裁字符串中的空格。</span><span class="sxs-lookup"><span data-stu-id="f440f-179">You want to **trim** the spaces from the strings.</span></span>

    <span data-ttu-id="f440f-180"><xref:System.String.Trim%2A> 方法及相关方法 <xref:System.String.TrimStart%2A> 和 <xref:System.String.TrimEnd%2A> 将完成这项工作。</span><span class="sxs-lookup"><span data-stu-id="f440f-180">The <xref:System.String.Trim%2A> method and related methods <xref:System.String.TrimStart%2A> and <xref:System.String.TrimEnd%2A> do that work.</span></span> <span data-ttu-id="f440f-181">你只需使用这些方法即可删除前导和尾随空格。</span><span class="sxs-lookup"><span data-stu-id="f440f-181">You can just use those methods to remove leading and trailing spaces.</span></span> <span data-ttu-id="f440f-182">试运行以下代码：</span><span class="sxs-lookup"><span data-stu-id="f440f-182">Try the following code:</span></span>


    ```csharp

    string greeting = "      Hello World!       ";

    Console.WriteLine($"[{greeting}]");


    string trimmedGreeting = greeting.TrimStart();

    Console.WriteLine($"[{trimmedGreeting}]");


    trimmedGreeting = greeting.TrimEnd();

    Console.WriteLine($"[{trimmedGreeting}]");


    trimmedGreeting = greeting.Trim();

    Console.WriteLine($"[{trimmedGreeting}]");

    ```


    <span data-ttu-id="f440f-183">此示例强调了使用字符串时需要注意的几个重要概念。</span><span class="sxs-lookup"><span data-stu-id="f440f-183">This sample reinforces a couple of important concepts for working with strings.</span></span> <span data-ttu-id="f440f-184">控制字符串的方法返回的是新字符串对象，而不是就地进行修改。</span><span class="sxs-lookup"><span data-stu-id="f440f-184">The methods that manipulate strings return new string objects rather than making modifications in place.</span></span> <span data-ttu-id="f440f-185">可以看到，对任何 `Trim` 方法的所有调用都是返回新字符串，而不是更改原始消息。</span><span class="sxs-lookup"><span data-stu-id="f440f-185">You can see that each call to any of the `Trim` methods returns a new string but doesn't change the original message.</span></span>


    <span data-ttu-id="f440f-186">还可以通过其他方法使用字符串。</span><span class="sxs-lookup"><span data-stu-id="f440f-186">There are other methods available to work with a string.</span></span> <span data-ttu-id="f440f-187">例如，可能之前已在编辑器或字处理器中使用了搜索和替换命令。</span><span class="sxs-lookup"><span data-stu-id="f440f-187">For example, you've probably used a search and replace command in an editor or word processor before.</span></span> <span data-ttu-id="f440f-188"><xref:System.String.Replace%2A> 方法在字符串中执行类似操作。</span><span class="sxs-lookup"><span data-stu-id="f440f-188">The <xref:System.String.Replace%2A> method does something similar in a string.</span></span> <span data-ttu-id="f440f-189">此方法搜索子字符串，并将它替换为其他文本。</span><span class="sxs-lookup"><span data-stu-id="f440f-189">It searches for a substring and replaces it with different text.</span></span> <span data-ttu-id="f440f-190"><xref:System.String.Replace%2A> 方法需要使用两个参数。</span><span class="sxs-lookup"><span data-stu-id="f440f-190">The <xref:System.String.Replace%2A> method takes two **parameters**.</span></span> <span data-ttu-id="f440f-191">这两个字符串用括号括住。</span><span class="sxs-lookup"><span data-stu-id="f440f-191">These are the strings between the parentheses.</span></span> <span data-ttu-id="f440f-192">第一个字符串是要搜索的文本。</span><span class="sxs-lookup"><span data-stu-id="f440f-192">The first string is the text to search for.</span></span> <span data-ttu-id="f440f-193">第二个字符串是替换后的文本。</span><span class="sxs-lookup"><span data-stu-id="f440f-193">The second string is the text to replace it with.</span></span> <span data-ttu-id="f440f-194">亲自试一试吧。</span><span class="sxs-lookup"><span data-stu-id="f440f-194">Try it for yourself.</span></span> <span data-ttu-id="f440f-195">添加以下代码。</span><span class="sxs-lookup"><span data-stu-id="f440f-195">Add this code.</span></span> <span data-ttu-id="f440f-196">当你在 `sayHello` 变量后面开始键入 `.Re` 时，键入它以查看提示：</span><span class="sxs-lookup"><span data-stu-id="f440f-196">Type it in to see the hints as you start typing `.Re` after the `sayHello` variable:</span></span>


    ```csharp

    string sayHello = "Hello World!";

    Console.WriteLine(sayHello);

    sayHello = sayHello.Replace("Hello", "Greetings");

    Console.WriteLine(sayHello);

    ```


    <span data-ttu-id="f440f-197">还有两个实用方法，可以将字符串设为全部大写或小写。</span><span class="sxs-lookup"><span data-stu-id="f440f-197">Two other useful methods make a string ALL CAPS or all lower case.</span></span> <span data-ttu-id="f440f-198">试试运行以下代码。</span><span class="sxs-lookup"><span data-stu-id="f440f-198">Try the following code.</span></span> <span data-ttu-id="f440f-199">在你开始键入 `To` 时，键入它以查看 IntelliSense 如何提供提示：</span><span class="sxs-lookup"><span data-stu-id="f440f-199">Type it in to see how **IntelliSense** provides hints as you start to type `To`:</span></span>


    ```csharp

    Console.WriteLine(sayHello.ToUpper());

    Console.WriteLine(sayHello.ToLower());

    ```


    > [!NOTE]

    > <span data-ttu-id="f440f-200">此联机编码体验处于预览模式。</span><span class="sxs-lookup"><span data-stu-id="f440f-200">This online coding experience is in preview mode.</span></span> <span data-ttu-id="f440f-201">如果遇到问题，请[在 dotnet/try 存储库上](https://github.com/dotnet/try/issues)进行报告。</span><span class="sxs-lookup"><span data-stu-id="f440f-201">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="f440f-202">搜索字符串</span><span class="sxs-lookup"><span data-stu-id="f440f-202">Search strings</span></span>
  durationInMinutes: 10
  content: >
    <span data-ttu-id="f440f-203">搜索和替换操作的另一方面是，查找字符串中的文本。</span><span class="sxs-lookup"><span data-stu-id="f440f-203">The other part of a *search and replace* operation is to find text in a string.</span></span> <span data-ttu-id="f440f-204">可以使用 <xref:System.String.Contains%2A> 方法进行搜索。</span><span class="sxs-lookup"><span data-stu-id="f440f-204">You can use the  <xref:System.String.Contains%2A> method for searching.</span></span> <span data-ttu-id="f440f-205">此方法可确定字符串是否包含子字符串。</span><span class="sxs-lookup"><span data-stu-id="f440f-205">It tells you if a string contains a substring inside it.</span></span> <span data-ttu-id="f440f-206">若要探索 <xref:System.String.Contains%2A>，请试运行以下代码：</span><span class="sxs-lookup"><span data-stu-id="f440f-206">Try the following code to explore <xref:System.String.Contains%2A>:</span></span>


    ```csharp

    string songLyrics = "You say goodbye, and I say hello";

    Console.WriteLine(songLyrics.Contains("goodbye"));

    Console.WriteLine(songLyrics.Contains("greetings"));

    ```


    <span data-ttu-id="f440f-207"><xref:System.String.Contains%2A> 方法返回布尔值，指明是否找到了要搜索的字符串。</span><span class="sxs-lookup"><span data-stu-id="f440f-207">The <xref:System.String.Contains%2A> method returns a **boolean** value which tells you if the string you were searching for was found.</span></span> <span data-ttu-id="f440f-208">布尔变量存储 `true` 或 `false` 值。</span><span class="sxs-lookup"><span data-stu-id="f440f-208">A **boolean** stores either a `true` or a `false` value.</span></span> <span data-ttu-id="f440f-209">今后推出的课程将详细介绍布尔值。</span><span class="sxs-lookup"><span data-stu-id="f440f-209">You'll learn more about **boolean** values in a later lesson.</span></span>


    <span data-ttu-id="f440f-210">***挑战***</span><span class="sxs-lookup"><span data-stu-id="f440f-210">***Challenge***</span></span>


    <span data-ttu-id="f440f-211">有两个类似方法 <xref:System.String.StartsWith%2A> 和 <xref:System.String.EndsWith%2A>，也可以在字符串中搜索子字符串。</span><span class="sxs-lookup"><span data-stu-id="f440f-211">There are two similar methods, <xref:System.String.StartsWith%2A> and <xref:System.String.EndsWith%2A> that also search for sub-strings in a string.</span></span> <span data-ttu-id="f440f-212">这些方法搜索字符串开头或结尾的子字符串。</span><span class="sxs-lookup"><span data-stu-id="f440f-212">These find a substring at the beginning or the end of the string.</span></span> <span data-ttu-id="f440f-213">试着将上一示例修改为使用 <xref:System.String.StartsWith%2A> 和 <xref:System.String.EndsWith%2A>，而不是使用 <xref:System.String.Contains%2A>。</span><span class="sxs-lookup"><span data-stu-id="f440f-213">Try to modify the previous sample to use <xref:System.String.StartsWith%2A> and <xref:System.String.EndsWith%2A> instead of <xref:System.String.Contains%2A>.</span></span> <span data-ttu-id="f440f-214">搜索字符串开头是否有“You”或“goodbye”。</span><span class="sxs-lookup"><span data-stu-id="f440f-214">Search for "You" or "goodbye" at the beginning of a string.</span></span> <span data-ttu-id="f440f-215">搜索字符串末尾是否有“hello”或“goodbye”。</span><span class="sxs-lookup"><span data-stu-id="f440f-215">Search for "hello" or "goodbye" at the end of a string.</span></span>


    > [!NOTE]

    > <span data-ttu-id="f440f-216">针对字符串结尾文本测试时，请注意标点符号。</span><span class="sxs-lookup"><span data-stu-id="f440f-216">Watch your punctuation when you test for the text at the end of the string.</span></span> <span data-ttu-id="f440f-217">如果字符串以句点结尾，必须检查是否有以句点结尾的字符串。</span><span class="sxs-lookup"><span data-stu-id="f440f-217">If the string ends with a period, you must check for a string that ends with a period.</span></span>


    <span data-ttu-id="f440f-218">如果字符串以“You”开头，以“hello”结尾的字符串，则应获得 `true`；如果以“goodbye”为开头或结尾，则获得 false。</span><span class="sxs-lookup"><span data-stu-id="f440f-218">You should get `true` for starting with "You" and ending with "hello" and false for starting with or ending with "goodbye".</span></span>


    > [!NOTE]

    > <span data-ttu-id="f440f-219">此联机编码体验处于预览模式。</span><span class="sxs-lookup"><span data-stu-id="f440f-219">This online coding experience is in preview mode.</span></span> <span data-ttu-id="f440f-220">如果遇到问题，请[在 dotnet/try 存储库上](https://github.com/dotnet/try/issues)进行报告。</span><span class="sxs-lookup"><span data-stu-id="f440f-220">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="f440f-221">完成挑战</span><span class="sxs-lookup"><span data-stu-id="f440f-221">Complete challenge</span></span>
  durationInMinutes: 3
  content: >
    <span data-ttu-id="f440f-222">最后是否生成如下代码？</span><span class="sxs-lookup"><span data-stu-id="f440f-222">Did you come up with something like this?</span></span>


    ```csharp

    string songLyrics = "You say goodbye, and I say hello";

    Console.WriteLine(songLyrics.StartsWith("You"));

    Console.WriteLine(songLyrics.StartsWith("goodbye"));


    Console.WriteLine(songLyrics.EndsWith("hello"));

    Console.WriteLine(songLyrics.EndsWith("goodbye"));

    ```


    > [!NOTE]

    > <span data-ttu-id="f440f-223">此联机编码体验处于预览模式。</span><span class="sxs-lookup"><span data-stu-id="f440f-223">This online coding experience is in preview mode.</span></span> <span data-ttu-id="f440f-224">如果遇到问题，请[在 dotnet/try 存储库上](https://github.com/dotnet/try/issues)进行报告。</span><span class="sxs-lookup"><span data-stu-id="f440f-224">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- content: >-
    <span data-ttu-id="f440f-225">你已完成“C# 初探”C# 教程简介。</span><span class="sxs-lookup"><span data-stu-id="f440f-225">You've completed the "Hello C#" introduction to C# tutorial.</span></span> <span data-ttu-id="f440f-226">可单击下方的“C# 中的数字”链接开始下一个交互式教程，或者可访问 [.NET 站点](https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro)下载 .NET Core SDK，在计算机上创建项目，并继续编码。</span><span class="sxs-lookup"><span data-stu-id="f440f-226">You can click the **Numbers in C#** link below to start the next interactive tutorial, or you can visit the [.NET site](https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro) to download the .NET Core SDK, create a project on your machine, and keep coding.</span></span> <span data-ttu-id="f440f-227">请通过“后续步骤”部分返回到这些教程。</span><span class="sxs-lookup"><span data-stu-id="f440f-227">The "Next steps" section brings you back to these tutorials.</span></span>


    <span data-ttu-id="f440f-228">有关 `string` 类型的其他阅读材料：</span><span class="sxs-lookup"><span data-stu-id="f440f-228">For further reading on the `string` type:</span></span>

    - <span data-ttu-id="f440f-229">[字符串](../../programming-guide/strings/index.md)中的 [C# 编程指南](../../programming-guide/index.md)主题。</span><span class="sxs-lookup"><span data-stu-id="f440f-229">[C# Programming Guide](../../programming-guide/index.md) topic on [strings](../../programming-guide/strings/index.md).</span></span>

    - <span data-ttu-id="f440f-230">[有关使用字符串的操作方法提示](../../how-to/index.md#working-with-strings)。</span><span class="sxs-lookup"><span data-stu-id="f440f-230">[How to tips on working with strings](../../how-to/index.md#working-with-strings).</span></span>
