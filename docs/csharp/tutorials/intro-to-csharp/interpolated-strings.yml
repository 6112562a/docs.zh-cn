### YamlMime:Tutorial
title: <span data-ttu-id="d733d-101">使用字符串内插构造格式化字符串</span><span class="sxs-lookup"><span data-stu-id="d733d-101">Use string interpolation to construct formatted strings</span></span>
metadata:
  title: 字符串内插 - C# 交互式教程
  description: 在本教程中，你可通过浏览器以交互方式探索 C# 字符串内插功能。 读者可以直接在浏览器中编写 C# 代码，并查看代码编译和运行结果。
  audience: Developer
  ms.custom: mvc
  ms.date: 08/24/2018
  level: Beginner
  displayType: two-column
  interactive: csharp
  nextTutorialHref: list-collection.yml
  nextTutorialTitle: <span data-ttu-id="d733d-105">C# 中的集合</span><span class="sxs-lookup"><span data-stu-id="d733d-105">Collections in C#</span></span>
  ms.openlocfilehash: c5d9ba80df952a58740ac2557bfc0011ef2ea539
  ms.sourcegitcommit: 3b9b7ae6771712337d40374d2fef6b25b0d53df6
  ms.translationtype: HT
  ms.contentlocale: zh-CN
  ms.lasthandoff: 01/04/2019
  ms.locfileid: "54030407"
items:
- durationInMinutes: 2
  content: >
    <span data-ttu-id="d733d-106">本教程介绍了如何使用[字符串内插](../../language-reference/tokens/interpolated.md)将值插入单个字符串中。</span><span class="sxs-lookup"><span data-stu-id="d733d-106">This tutorial teaches you how to use [string interpolation](../../language-reference/tokens/interpolated.md) to insert values into a single string.</span></span> <span data-ttu-id="d733d-107">还介绍了如何控制结果字符串的文本格式设置。</span><span class="sxs-lookup"><span data-stu-id="d733d-107">You also learn how to control text formatting of the result string.</span></span> <span data-ttu-id="d733d-108">可以使用浏览器编写和运行 C# 代码，并即时查看结果。</span><span class="sxs-lookup"><span data-stu-id="d733d-108">You use your browser to write and run C# code and can immediately see the results.</span></span>
- title: <span data-ttu-id="d733d-109">创建内插字符串</span><span class="sxs-lookup"><span data-stu-id="d733d-109">Create an interpolated string</span></span>
  durationInMinutes: 2
  content: >
    <span data-ttu-id="d733d-110">在交互式窗口中，运行以下代码。</span><span class="sxs-lookup"><span data-stu-id="d733d-110">Run the following code in the interactive window.</span></span> <span data-ttu-id="d733d-111">为此，请在交互式窗口中键入代码（将“`<name>`”替换为自己的姓名），然后选择“运行”：</span><span class="sxs-lookup"><span data-stu-id="d733d-111">To do that, type the code in the interactive window (replace `<name>` with your name) and select **Run**:</span></span>


    ```csharp

    var name = "<name>";

    Console.WriteLine($"Hello, {name}. It's a pleasure to meet you!");

    ```


    <span data-ttu-id="d733d-112">运行该代码时，“输出”会在问候语中显示一个包含你的姓名的字符串。</span><span class="sxs-lookup"><span data-stu-id="d733d-112">When you run the code, **Output** displays a string that includes your name in the greeting.</span></span> <span data-ttu-id="d733d-113"><xref:System.Console.WriteLine%2A> 方法调用的字符串参数是一个内插字符串。</span><span class="sxs-lookup"><span data-stu-id="d733d-113">The string argument of the <xref:System.Console.WriteLine%2A> method call is an *interpolated string*.</span></span> <span data-ttu-id="d733d-114">这是一种模板，可让你用包含嵌入代码的字符串构造单个字符串（称为结果字符串）。</span><span class="sxs-lookup"><span data-stu-id="d733d-114">It's a kind of template that lets you construct a single string (called the *result string*) from a string that includes embedded code.</span></span> <span data-ttu-id="d733d-115">内插字符串特别适用于将值插入字符串或连接多个字符串（将字符串联在一起）。</span><span class="sxs-lookup"><span data-stu-id="d733d-115">Interpolated strings are particularly useful for inserting values into a string or concatenating (joining together) several strings.</span></span>


    <span data-ttu-id="d733d-116">以上示例包含了每个内插字符串必须具备的两个元素：</span><span class="sxs-lookup"><span data-stu-id="d733d-116">The example above contains the two elements that every interpolated string must have:</span></span>


    - <span data-ttu-id="d733d-117">字符串文本以 `$` 字符开头，后接左双引号字符。</span><span class="sxs-lookup"><span data-stu-id="d733d-117">A string literal that begins with the `$` character before its opening quotation mark character.</span></span> <span data-ttu-id="d733d-118">`$` 符号和引号字符之间不能有空格。</span><span class="sxs-lookup"><span data-stu-id="d733d-118">There can't be any spaces between the `$` symbol and the quotation mark character.</span></span> <span data-ttu-id="d733d-119">（如果希望看到包含空格会发生什么情况，请在交互式窗口中的 `$` 字符后面插入一个空格，然后运行更新的代码。</span><span class="sxs-lookup"><span data-stu-id="d733d-119">(If you'd like to see what happens if you include one, insert a space after the `$` character in the interactive window and run the updated code.</span></span> <span data-ttu-id="d733d-120">C# 编译器报错“意外的字符 '$'”。）</span><span class="sxs-lookup"><span data-stu-id="d733d-120">The C# compiler complains, "Unexpected character '$'".)</span></span>


    - <span data-ttu-id="d733d-121">一个或多个内插表达式。</span><span class="sxs-lookup"><span data-stu-id="d733d-121">One or more *interpolated expressions*.</span></span> <span data-ttu-id="d733d-122">左大括号和右大括号（`{` 和 `}`）指示内插表达式。</span><span class="sxs-lookup"><span data-stu-id="d733d-122">An interpolated expression is indicated by an opening and closing brace (`{` and `}`).</span></span> <span data-ttu-id="d733d-123">可将任何返回值的 C# 表达式置于大括号内（包括 `null`）。</span><span class="sxs-lookup"><span data-stu-id="d733d-123">You can put any C# expression that returns a value (including `null`) inside the braces.</span></span>


    <span data-ttu-id="d733d-124">下面再尝试一些其他数据类型的字符串内插示例。</span><span class="sxs-lookup"><span data-stu-id="d733d-124">Let's try a few more string interpolation examples with some other data types.</span></span>


    > [!NOTE]

    > <span data-ttu-id="d733d-125">此联机编码体验处于预览模式。</span><span class="sxs-lookup"><span data-stu-id="d733d-125">This online coding experience is in preview mode.</span></span> <span data-ttu-id="d733d-126">如果遇到问题，请[在 dotnet/try 存储库上](https://github.com/dotnet/try/issues)进行报告。</span><span class="sxs-lookup"><span data-stu-id="d733d-126">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="d733d-127">包含不同的数据类型</span><span class="sxs-lookup"><span data-stu-id="d733d-127">Include different data types</span></span>
  durationInMinutes: 5
  content: >
    <span data-ttu-id="d733d-128">上一步使用了字符串内插将一个字符串插入到了另一字符串中。</span><span class="sxs-lookup"><span data-stu-id="d733d-128">In the previous step, you used string interpolation to insert one string inside of another.</span></span> <span data-ttu-id="d733d-129">不过，内插字符串表达式的结果可以是任何数据类型。</span><span class="sxs-lookup"><span data-stu-id="d733d-129">The result of an interpolated expression can be of any data type, though.</span></span> <span data-ttu-id="d733d-130">下面让我们在内插字符串中添加多种数据类型的值。</span><span class="sxs-lookup"><span data-stu-id="d733d-130">Let's include values of various data types in an interpolated string.</span></span>


    <span data-ttu-id="d733d-131">在以下示例中，首先定义一个具有 `Name` [属性](../../properties.md)和 `ToString` [方法](../../methods.md)的[类](../../programming-guide/classes-and-structs/classes.md)数据类型 `Vegetable`，它可以[替代](../../language-reference/keywords/override.md) <xref:System.Object.ToString?displayProperty=nameWithType> 方法的行为。</span><span class="sxs-lookup"><span data-stu-id="d733d-131">In the following example, we first define a [class](../../programming-guide/classes-and-structs/classes.md) data type `Vegetable` that has a `Name` [property](../../properties.md) and a `ToString` [method](../../methods.md), which [overrides](../../language-reference/keywords/override.md) the behavior of the <xref:System.Object.ToString?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="d733d-132">[`public` 访问修饰符](../../language-reference/keywords/public.md)使该方法可用于任何客户端代码以获取 `Vegetable` 实例的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="d733d-132">The [`public` access modifier](../../language-reference/keywords/public.md) makes that method available to any client code to get the string representation of a `Vegetable` instance.</span></span> <span data-ttu-id="d733d-133">在本示例中，`Vegetable.ToString` 方法返回在 `Vegetable` [构造函数](../../programming-guide/classes-and-structs/constructors.md)处初始化的 `Name` 属性的值：`Vegetable(string name) => Name = name;`。</span><span class="sxs-lookup"><span data-stu-id="d733d-133">In the example the `Vegetable.ToString` method returns the value of the `Name` property that is initialized at the `Vegetable` [constructor](../../programming-guide/classes-and-structs/constructors.md): `Vegetable(string name) => Name = name;`.</span></span> <span data-ttu-id="d733d-134">然后，通过使用 [`new` 关键字](../../language-reference/keywords/new-operator.md)并为构造函数 `Vegetable` 提供一个名称来创建名为 `item` 的 `Vegetable` 类的实例。</span><span class="sxs-lookup"><span data-stu-id="d733d-134">Then we create an instance of the `Vegetable` class named `item` by using the [`new` keyword](../../language-reference/keywords/new-operator.md) and providing a name for the constructor `Vegetable`.</span></span> <span data-ttu-id="d733d-135">最后，将该实例添加到同样包含 <xref:System.DateTime> 值、<xref:System.Decimal> 值和 `Unit` [枚举](../../programming-guide/enumeration-types.md)值的内插字符串中。</span><span class="sxs-lookup"><span data-stu-id="d733d-135">Finally, we include that instance into an interpolated string that also contains a <xref:System.DateTime> value, a <xref:System.Decimal> value, and a `Unit` [enumeration](../../programming-guide/enumeration-types.md) value.</span></span> <span data-ttu-id="d733d-136">在交互式窗口中运行以下代码：</span><span class="sxs-lookup"><span data-stu-id="d733d-136">Run the following code in the interactive window:</span></span>


    ```csharp

    public class Vegetable

    {
       public Vegetable(string name) => Name = name;

       public string Name { get; }

       public override string ToString() => Name;
    }


    public enum Unit { item, kilogram, gram, dozen };


    var item = new Vegetable("eggplant");

    var date = DateTime.Now;

    var price = 1.99m;

    var unit = Unit.item;

    Console.WriteLine($"On {date}, the price of {item} was {price} per {unit}.");

    ```


    <span data-ttu-id="d733d-137">注意，内插字符串中的内插表达式 `item` 会解析为结果字符串中的“eggplant”文本。</span><span class="sxs-lookup"><span data-stu-id="d733d-137">Note that the interpolated expression `item` in the interpolated string resolves to the text "eggplant" in the result string.</span></span> <span data-ttu-id="d733d-138">这是因为，当表达式结果的类型不是字符串时，会按照以下方式将其解析为字符串：</span><span class="sxs-lookup"><span data-stu-id="d733d-138">That's because, when the type of the expression result is not a string, the result is resolved to a string in the following way:</span></span>


    - <span data-ttu-id="d733d-139">如果内插表达式的计算结果为 `null`，则会使用一个空字符串（"" 或 <xref:System.String.Empty?displayProperty=nameWithType>）。</span><span class="sxs-lookup"><span data-stu-id="d733d-139">If the interpolated expression evaluates to `null`, an empty string ("", or <xref:System.String.Empty?displayProperty=nameWithType>) is used.</span></span>


    - <span data-ttu-id="d733d-140">如果内插表达式的计算结果不是 `null`，通常会调用结果类型的 `ToString` 方法。</span><span class="sxs-lookup"><span data-stu-id="d733d-140">If the interpolated expression doesn't evaluate to `null`, typically the `ToString` method of the result type is called.</span></span> <span data-ttu-id="d733d-141">可以通过更新 `Vegetable.ToString` 方法的实现来进行测试。</span><span class="sxs-lookup"><span data-stu-id="d733d-141">You can test this by updating the implementation of the `Vegetable.ToString` method.</span></span> <span data-ttu-id="d733d-142">你甚至不用实现 `ToString` 方法，因为每个类型都有一些此方法的实现。</span><span class="sxs-lookup"><span data-stu-id="d733d-142">You might not even need to implement the `ToString` method since every type has some implementation of this method.</span></span> <span data-ttu-id="d733d-143">可通过注释掉示例中 `Vegetable.ToString` 方法的定义（在它前面添加注释符号 `//` 即可）来进行测试。</span><span class="sxs-lookup"><span data-stu-id="d733d-143">To test this, comment out the definition of the `Vegetable.ToString` method in the example (to do that, put a comment symbol, `//`, in front of it).</span></span> <span data-ttu-id="d733d-144">在输出中，字符串“eggplant”被替换为完全限定的类型名称（由 C# REPL 定义的名称空间以及类型名称），这是 <xref:System.Object.ToString?displayProperty=nameWithType> 方法的默认行为。</span><span class="sxs-lookup"><span data-stu-id="d733d-144">In the output, the string "eggplant" is replaced by the fully qualified type name (the namespace defined by the C# REPL along with the type name), which is the default behavior of the <xref:System.Object.ToString?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="d733d-145">对于枚举值的 `ToString` 方法，其默认行为是返回该值的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="d733d-145">The default behavior of the `ToString` method for an enumeration value is to return the string representation of the value.</span></span>


    <span data-ttu-id="d733d-146">在此示例的输出中，日期过于精确（eggplant 的价格不会以秒为单位变化），且价格值没有标明货币单位。</span><span class="sxs-lookup"><span data-stu-id="d733d-146">In the output from this example, the date is too precise (the price of eggplant doesn't change every second), and the price value doesn't indicate a unit of currency.</span></span> <span data-ttu-id="d733d-147">下一步将介绍如何通过控制表达式结果的字符串表示形式来解决这些问题。</span><span class="sxs-lookup"><span data-stu-id="d733d-147">In the next step, you'll learn how to fix those issues by controlling the format of string representations of the expression results.</span></span>


    > [!NOTE]

    > <span data-ttu-id="d733d-148">此联机编码体验处于预览模式。</span><span class="sxs-lookup"><span data-stu-id="d733d-148">This online coding experience is in preview mode.</span></span> <span data-ttu-id="d733d-149">如果遇到问题，请[在 dotnet/try 存储库上](https://github.com/dotnet/try/issues)进行报告。</span><span class="sxs-lookup"><span data-stu-id="d733d-149">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="d733d-150">控制内插表达式的格式</span><span class="sxs-lookup"><span data-stu-id="d733d-150">Control the formatting of interpolated expressions</span></span>
  durationInMinutes: 5
  content: >
    <span data-ttu-id="d733d-151">上一步将两个格式不正确的字符串插入到了结果字符串中。</span><span class="sxs-lookup"><span data-stu-id="d733d-151">In the previous step, two poorly formatted strings were inserted into the result string.</span></span> <span data-ttu-id="d733d-152">一个是日期和时间值，只有日期是合适的。</span><span class="sxs-lookup"><span data-stu-id="d733d-152">One was a date and time value for which only the date was appropriate.</span></span> <span data-ttu-id="d733d-153">第二个是没有标明货币单位的价格。</span><span class="sxs-lookup"><span data-stu-id="d733d-153">The second was a price that didn't indicate its unit of currency.</span></span> <span data-ttu-id="d733d-154">这两个问题都很容易解决。</span><span class="sxs-lookup"><span data-stu-id="d733d-154">Both issues are easy to address.</span></span> <span data-ttu-id="d733d-155">通过字符串内插，可以指定用于控制特定类型格式的格式字符串。</span><span class="sxs-lookup"><span data-stu-id="d733d-155">String interpolation lets you specify *format strings* that control the formatting of particular types.</span></span> <span data-ttu-id="d733d-156">将前面示例中的调用修改为 `Console.WriteLine`，从而包含日期和价格表达式的格式字符串，如以下行所示：</span><span class="sxs-lookup"><span data-stu-id="d733d-156">Modify the call to `Console.WriteLine` from the previous example to include the format strings for the date and price expressions as shown in the following line:</span></span>


    ```csharp

    Console.WriteLine($"On {date:d}, the price of {item} was {price:C2} per {unit}.");

    ```


    <span data-ttu-id="d733d-157">可通过在内插表达式后接冒号（“:”）和格式字符串来指定格式字符串。</span><span class="sxs-lookup"><span data-stu-id="d733d-157">You specify a format string by following the interpolated expression with a colon (":") and the format string.</span></span> <span data-ttu-id="d733d-158">“d”是[标准日期和时间格式字符串](../../../standard/base-types/standard-date-and-time-format-strings.md#the-short-date-d-format-specifier)，表示短日期格式。</span><span class="sxs-lookup"><span data-stu-id="d733d-158">"d" is a [standard date and time format string](../../../standard/base-types/standard-date-and-time-format-strings.md#the-short-date-d-format-specifier) that represents the short date format.</span></span> <span data-ttu-id="d733d-159">“C2”是[标准数值格式字符串](../../../standard/base-types/standard-numeric-format-strings.md#the-currency-c-format-specifier)，用数字表示货币值（精确到小数点后两位）。</span><span class="sxs-lookup"><span data-stu-id="d733d-159">"C2" is a [standard numeric format string](../../../standard/base-types/standard-numeric-format-strings.md#the-currency-c-format-specifier) that represents a number as a currency value with two digits after the decimal point.</span></span>


    <span data-ttu-id="d733d-160">.NET 库中的许多类型支持一组预定义的格式字符串。</span><span class="sxs-lookup"><span data-stu-id="d733d-160">A number of types in the .NET libraries support a predefined set of format strings.</span></span> <span data-ttu-id="d733d-161">这些格式字符串包括所有数值类型以及日期和时间类型。</span><span class="sxs-lookup"><span data-stu-id="d733d-161">These include all the numeric types and the date and time types.</span></span> <span data-ttu-id="d733d-162">有关支持格式字符串的完整类型列表，请参阅 [.NET 中的格式化类型](../../../standard/base-types/formatting-types.md)文章中的[格式字符串和. NET 类库类型](../../../standard/base-types/formatting-types.md#stringRef)。</span><span class="sxs-lookup"><span data-stu-id="d733d-162">For a complete list of types that support format strings, see [Format Strings and .NET Class Library Types](../../../standard/base-types/formatting-types.md#stringRef) in the [Formatting Types in .NET](../../../standard/base-types/formatting-types.md) article.</span></span>


    <span data-ttu-id="d733d-163">尝试修改示例中的格式字符串，查看更改如何影响日期、时间和数值的格式。</span><span class="sxs-lookup"><span data-stu-id="d733d-163">Try modifying the format strings in the example to see how they affect the formatting of the date and time and the numeric value.</span></span> <span data-ttu-id="d733d-164">将 `{date:d}` 中的“d”更改为“t”（显示短时间格式）、“y”（显示年份和月份）和“yyyy”（显示四位数年份）。</span><span class="sxs-lookup"><span data-stu-id="d733d-164">Change the "d" in `{date:d}` to "t" (to display the short time format), "y" (to display the year and month), and "yyyy" (to display the year as a four-digit number).</span></span> <span data-ttu-id="d733d-165">将 `{price:C2}` 中的“C2”更改为“e”（用于指数计数法）和“F3”（使数值在小数点后保持三位数字）。</span><span class="sxs-lookup"><span data-stu-id="d733d-165">Change the "C2" in `{price:C2}` to "e" (for exponential notation) and "F3" (for a numeric value with three digits after the decimal point).</span></span>


    <span data-ttu-id="d733d-166">除了控制格式之外，还可以控制结果字符串中包含的格式字符串的字段宽度和对齐方式。</span><span class="sxs-lookup"><span data-stu-id="d733d-166">In addition to controlling formatting, you can also control the field width and alignment of the formatted strings that are included in the result string.</span></span> <span data-ttu-id="d733d-167">下一步将介绍如何执行此操作。</span><span class="sxs-lookup"><span data-stu-id="d733d-167">In the next step, you'll learn how to do this.</span></span>


    > [!NOTE]

    > <span data-ttu-id="d733d-168">此联机编码体验处于预览模式。</span><span class="sxs-lookup"><span data-stu-id="d733d-168">This online coding experience is in preview mode.</span></span> <span data-ttu-id="d733d-169">如果遇到问题，请[在 dotnet/try 存储库上](https://github.com/dotnet/try/issues)进行报告。</span><span class="sxs-lookup"><span data-stu-id="d733d-169">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="d733d-170">控制内插表达式的字段宽度和对齐方式</span><span class="sxs-lookup"><span data-stu-id="d733d-170">Control the field width and alignment of interpolated expressions</span></span>
  durationInMinutes: 6
  content: >
    <span data-ttu-id="d733d-171">通常，当内插表达式的结果格式化为字符串时，结果字符串中会包含该字符串，但没有前导或尾随空格。</span><span class="sxs-lookup"><span data-stu-id="d733d-171">Ordinarily, when the result of an interpolated expression is formatted to string, that string is included in a result string without leading or trailing spaces.</span></span> <span data-ttu-id="d733d-172">特别是对于使用一组数据的情况，控制字段宽度和对齐方式有助于增强输出的可读性。</span><span class="sxs-lookup"><span data-stu-id="d733d-172">Particularly when you work with a set of data, being able to control a field width and text alignment helps to produce a more readable output.</span></span> <span data-ttu-id="d733d-173">若要查看，请运行以下代码：</span><span class="sxs-lookup"><span data-stu-id="d733d-173">To see this, run the following code:</span></span>


    ```csharp
      var inventory = new Dictionary<string, int>()
      {
          ["hammer, ball pein"] = 18,
          ["hammer, cross pein"] = 5,
          ["screwdriver, Phillips #2"] = 14
      };

      Console.WriteLine($"Inventory on {DateTime.Now:d}");
      Console.WriteLine(" ");
      Console.WriteLine($"|{"Item",-25}|{"Quantity",10}|");
      foreach (var item in inventory)
         Console.WriteLine($"|{item.Key,-25}|{item.Value,10}|");
    ```


    <span data-ttu-id="d733d-174">项目名称为左对齐，其数量为右对齐。</span><span class="sxs-lookup"><span data-stu-id="d733d-174">The item names are left-aligned, and their quantities are right-aligned.</span></span> <span data-ttu-id="d733d-175">通过在内插表达式后面添加一个逗号（“,”）并指定“最小”字段宽度来指定对齐方式。</span><span class="sxs-lookup"><span data-stu-id="d733d-175">You specify the alignment by adding a comma (",") after an interpolated expression and designating the *minimum* field width.</span></span> <span data-ttu-id="d733d-176">如果指定的值是正数，则该字段为右对齐。</span><span class="sxs-lookup"><span data-stu-id="d733d-176">If the specified value is a positive number, the field is right-aligned.</span></span> <span data-ttu-id="d733d-177">如果它为负数，则该字段为左对齐。</span><span class="sxs-lookup"><span data-stu-id="d733d-177">If it is a negative number, the field is left-aligned.</span></span>


    <span data-ttu-id="d733d-178">尝试删除 `{"Item",-25}` 和 `{item.Key,-25}` 代码中的负号，然后再次运行该示例。</span><span class="sxs-lookup"><span data-stu-id="d733d-178">Try removing the negative signs from the `{"Item",-25}` and `{item.Key,-25}` code and run the example again.</span></span> <span data-ttu-id="d733d-179">此时，项名为右对齐。</span><span class="sxs-lookup"><span data-stu-id="d733d-179">This time, the item names are right-aligned.</span></span>


    <span data-ttu-id="d733d-180">可合并单个内插表达式中的对齐说明符和格式字符串。</span><span class="sxs-lookup"><span data-stu-id="d733d-180">You can combine an alignment specifier and a format string for a single interpolated expression.</span></span> <span data-ttu-id="d733d-181">为此，请先指定对齐方式，然后是冒号和格式字符串。</span><span class="sxs-lookup"><span data-stu-id="d733d-181">To do that, specify the alignment first, followed by a colon and the format string.</span></span> <span data-ttu-id="d733d-182">尝试以下示例代码，该代码使用定义的字段宽度显示三个格式化字符串：</span><span class="sxs-lookup"><span data-stu-id="d733d-182">Try the following code that displays three formatted strings with defined field widths:</span></span>


    ```csharp

    Console.WriteLine($"[{DateTime.Now,-20:d}] Hour [{DateTime.Now,-10:HH}] [{1063.342,15:N2}] feet");

    ```


    > [!NOTE]

    > <span data-ttu-id="d733d-183">此联机编码体验处于预览模式。</span><span class="sxs-lookup"><span data-stu-id="d733d-183">This online coding experience is in preview mode.</span></span> <span data-ttu-id="d733d-184">如果遇到问题，请[在 dotnet/try 存储库上](https://github.com/dotnet/try/issues)进行报告。</span><span class="sxs-lookup"><span data-stu-id="d733d-184">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- content: >-
    <span data-ttu-id="d733d-185">你已完成“字符串内插”交互式教程。</span><span class="sxs-lookup"><span data-stu-id="d733d-185">You've completed the string interpolation interactive tutorial.</span></span> <span data-ttu-id="d733d-186">可单击下方的“C# 中的集合”链接开始下一个交互式教程，或者可访问 [.NET 站点](https://www.microsoft.com/net/learn/dotnet/hello-world-tutorial)下载 .NET Core SDK，在计算机上创建项目，并继续编码。</span><span class="sxs-lookup"><span data-stu-id="d733d-186">You can click the **Collections in C#** link below to start the next interactive tutorial, or you can visit the [.NET site](https://www.microsoft.com/net/learn/dotnet/hello-world-tutorial) to download the .NET Core SDK, create a project on your machine, and keep coding.</span></span> <span data-ttu-id="d733d-187">“继续学习”步骤将带你回到教程中。</span><span class="sxs-lookup"><span data-stu-id="d733d-187">The "Keep Learning" step brings you back to these tutorials.</span></span>


    <span data-ttu-id="d733d-188">有关详细信息，请参阅[字符串内插](../../language-reference/tokens/interpolated.md)。</span><span class="sxs-lookup"><span data-stu-id="d733d-188">For more information, see [String interpolation](../../language-reference/tokens/interpolated.md).</span></span>
