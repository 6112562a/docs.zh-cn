### YamlMime:Tutorial
title: <span data-ttu-id="566cc-101">处理 C# 中的整数和浮点数</span><span class="sxs-lookup"><span data-stu-id="566cc-101">Manipulate integral and floating point numbers in C#</span></span>
metadata:
  title: C# 中的数字 - C# 交互式教程简介
  description: 本教程介绍了数字类型，读者可以使用浏览器通过交互方式了解 C#。 读者可以直接在浏览器中编写 C# 代码，并查看代码编译和运行结果。
  audience: Developer
  ms.custom: mvc
  ms.date: 08/24/2018
  level: Beginner
  nextTutorialHref: branches-and-loops.yml
  nextTutorialTitle: <span data-ttu-id="566cc-105">C# 中的分支和循环</span><span class="sxs-lookup"><span data-stu-id="566cc-105">Branches and loops in C#</span></span>
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: 7122bda62465482340ebdd2b1dc37577de9a0e69
  ms.sourcegitcommit: d6e27023aeaffc4b5a3cb4b88685018d6284ada4
  ms.translationtype: HT
  ms.contentlocale: zh-CN
  ms.lasthandoff: 07/09/2019
  ms.locfileid: "67661021"
items:
- durationInMinutes: 1
  content: >
    <span data-ttu-id="566cc-106">本教程通过交互方式介绍了 C# 中的数字类型，读者可以使用浏览器编写 C#，并查看代码编译和运行结果。</span><span class="sxs-lookup"><span data-stu-id="566cc-106">This tutorial teaches you about the numeric types in C# interactively, using your browser to write C# and see the results of compiling and running your code.</span></span> <span data-ttu-id="566cc-107">具体包含一系列课程，探索了 C# 中的数字和数学运算。</span><span class="sxs-lookup"><span data-stu-id="566cc-107">It contains a series of lessons that explore numbers and math operations in C#.</span></span> <span data-ttu-id="566cc-108">这些课程介绍了 C# 语言的基础知识。</span><span class="sxs-lookup"><span data-stu-id="566cc-108">These lessons teach you the fundamentals of the C# language.</span></span>
- title: <span data-ttu-id="566cc-109">探索整数数学运算</span><span class="sxs-lookup"><span data-stu-id="566cc-109">Explore integer math</span></span>
  durationInMinutes: 4
  content: >
    <span data-ttu-id="566cc-110">在交互式窗口中，运行以下代码。</span><span class="sxs-lookup"><span data-stu-id="566cc-110">Run the following code in the interactive window.</span></span> <span data-ttu-id="566cc-111">为此，请在交互式窗口中键入以下代码块，再单击“运行”按钮：</span><span class="sxs-lookup"><span data-stu-id="566cc-111">To do that, type the following code block in the interactive window and click the **Run** button:</span></span>


    ```csharp

    int a = 18;

    int b = 6;

    int c = a + b;

    Console.WriteLine(c);

    ```


    <span data-ttu-id="566cc-112">刚刚看到的是一种基本的整数数学运算。</span><span class="sxs-lookup"><span data-stu-id="566cc-112">You've just seen one of the fundamental math operations with integers.</span></span> <span data-ttu-id="566cc-113">`int` 类型表示整数（正整数或负整数）。</span><span class="sxs-lookup"><span data-stu-id="566cc-113">The `int` type represents an **integer**, a positive or negative whole number.</span></span> <span data-ttu-id="566cc-114">使用 `+` 符号执行加法运算。</span><span class="sxs-lookup"><span data-stu-id="566cc-114">You use the `+` symbol for addition.</span></span> <span data-ttu-id="566cc-115">其他常见的整数数学运算包括：</span><span class="sxs-lookup"><span data-stu-id="566cc-115">Other common mathematical operations for integers include:</span></span>


    - <span data-ttu-id="566cc-116">`-`：减法运算</span><span class="sxs-lookup"><span data-stu-id="566cc-116">`-` for subtraction</span></span>

    - <span data-ttu-id="566cc-117">`*`：乘法运算</span><span class="sxs-lookup"><span data-stu-id="566cc-117">`*` for multiplication</span></span>

    - <span data-ttu-id="566cc-118">`/`：除法运算</span><span class="sxs-lookup"><span data-stu-id="566cc-118">`/` for division</span></span>


    > [!TIP]

    > <span data-ttu-id="566cc-119">在本交互式教程中，可以修改在交互式窗口中已编写的代码，自行进行探索。</span><span class="sxs-lookup"><span data-stu-id="566cc-119">Throughout this interactive tutorial, you can explore on your own by modifying the code you've written in the interactive window.</span></span> <span data-ttu-id="566cc-120">本教程提供了可分步试运行的示例。</span><span class="sxs-lookup"><span data-stu-id="566cc-120">This tutorial provides examples that you can try at each step.</span></span>


    <span data-ttu-id="566cc-121">首先，探索这些不同类型的运算。</span><span class="sxs-lookup"><span data-stu-id="566cc-121">Start by exploring those different operations.</span></span> <span data-ttu-id="566cc-122">修改第三行代码，尝试执行所有这些运算。</span><span class="sxs-lookup"><span data-stu-id="566cc-122">Modify the third line to try each of these operations.</span></span> <span data-ttu-id="566cc-123">每次编辑后，单击“运行”按钮。</span><span class="sxs-lookup"><span data-stu-id="566cc-123">After each edit, click the **Run** button.</span></span>


    <span data-ttu-id="566cc-124">减法：</span><span class="sxs-lookup"><span data-stu-id="566cc-124">Subtraction:</span></span>


    ```csharp

    int c = a - b;

    ```


    <span data-ttu-id="566cc-125">乘法：</span><span class="sxs-lookup"><span data-stu-id="566cc-125">Multiplication:</span></span>


    ```csharp

    int c = a * b;

    ```


    <span data-ttu-id="566cc-126">除法：</span><span class="sxs-lookup"><span data-stu-id="566cc-126">Division:</span></span>


    ```csharp

    int c = a / b;

    ```


    <span data-ttu-id="566cc-127">如果愿意，也可以尝试在同一行中执行多个数学运算。</span><span class="sxs-lookup"><span data-stu-id="566cc-127">You can also experiment by performing multiple mathematics operations in the same line, if you'd like.</span></span>


    > [!TIP]

    > <span data-ttu-id="566cc-128">在探索 C#（或任何编程语言）的过程中，可能会在编写代码时犯错。</span><span class="sxs-lookup"><span data-stu-id="566cc-128">As you explore C# (or any programming language), you'll make mistakes when you write code.</span></span> <span data-ttu-id="566cc-129">编译器会发现并报告这些错误。</span><span class="sxs-lookup"><span data-stu-id="566cc-129">The **compiler** will find those errors and report them to you.</span></span> <span data-ttu-id="566cc-130">如果输出中有错误消息，请仔细比对示例代码和交互式窗口中的代码，看看要纠正哪些代码。</span><span class="sxs-lookup"><span data-stu-id="566cc-130">When the output contains error messages, look closely at the example code, and the code in the interactive window to see what to fix.</span></span>

    > <span data-ttu-id="566cc-131">这样做有助于了解 C# 代码结构。</span><span class="sxs-lookup"><span data-stu-id="566cc-131">That exercise will help you learn the structure of C# code.</span></span>


    > [!NOTE]

    > <span data-ttu-id="566cc-132">此联机编码体验处于预览模式。</span><span class="sxs-lookup"><span data-stu-id="566cc-132">This online coding experience is in preview mode.</span></span> <span data-ttu-id="566cc-133">如果遇到问题，请[在 dotnet/try 存储库上](https://github.com/dotnet/try/issues)进行报告。</span><span class="sxs-lookup"><span data-stu-id="566cc-133">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="566cc-134">探索运算顺序</span><span class="sxs-lookup"><span data-stu-id="566cc-134">Explore order of operations</span></span>
  durationInMinutes: 7
  content: >
    <span data-ttu-id="566cc-135">C# 语言使用与数学运算规则一致的规则，定义不同数学运算的优先级。</span><span class="sxs-lookup"><span data-stu-id="566cc-135">The C# language defines the precedence of different mathematics operations with rules consistent with the rules you learned in mathematics.</span></span>

    <span data-ttu-id="566cc-136">乘法和除法的优先级高于加法和减法。</span><span class="sxs-lookup"><span data-stu-id="566cc-136">Multiplication and division take precedence over addition and subtraction.</span></span>

    <span data-ttu-id="566cc-137">在交互式窗口中，运行以下代码进行探索：</span><span class="sxs-lookup"><span data-stu-id="566cc-137">Explore that by running the following code in the interactive window:</span></span>


    ```csharp

    int a = 5;

    int b = 4;

    int c = 2;

    int d = a + b * c;

    Console.WriteLine(d);

    ```


    <span data-ttu-id="566cc-138">输出结果表明，乘法先于加法执行。</span><span class="sxs-lookup"><span data-stu-id="566cc-138">The output demonstrates that the multiplication is performed before the addition.</span></span>


    <span data-ttu-id="566cc-139">可以在要优先执行的一个或多个运算前后添加括号，从而强制改变运算顺序：</span><span class="sxs-lookup"><span data-stu-id="566cc-139">You can force a different order of operation by adding parentheses around the operation or operations you want performed first:</span></span>


    ```csharp

    int a = 5;

    int b = 4;

    int c = 2;

    int d = (a + b) * c;

    Console.WriteLine(d);

    ```


    <span data-ttu-id="566cc-140">通过组合多个不同的运算，进一步探索运算顺序。</span><span class="sxs-lookup"><span data-stu-id="566cc-140">Explore more by combining many different operations.</span></span> <span data-ttu-id="566cc-141">将上面的第四行代码替换为以下代码：</span><span class="sxs-lookup"><span data-stu-id="566cc-141">Replace the fourth line above with something like this:</span></span>


    ```csharp

    int d = (a + b) - 6 * c + (12 * 4) / 3 + 12;

    ```


    <span data-ttu-id="566cc-142">可能已注意到，整数有一个非常有趣的行为。</span><span class="sxs-lookup"><span data-stu-id="566cc-142">You may have noticed an interesting behavior for integers.</span></span> <span data-ttu-id="566cc-143">整数除法始终生成整数结果，即使预期结果有小数或分数部分也是如此。</span><span class="sxs-lookup"><span data-stu-id="566cc-143">Integer division always produces an integer result, even when you'd expect the result to include a decimal or fractional portion.</span></span>


    <span data-ttu-id="566cc-144">如果还没有注意到此行为，请试运行以下代码：</span><span class="sxs-lookup"><span data-stu-id="566cc-144">If you haven't seen this behavior, try the following:</span></span>


    ```csharp

    int a = 7;

    int b = 4;

    int c = 3;

    int d = (a  + b) / c;

    Console.WriteLine(d);

    ```


    <span data-ttu-id="566cc-145">再次单击“运行”，看看结果如何。</span><span class="sxs-lookup"><span data-stu-id="566cc-145">Click **Run** again to see the results.</span></span>


    > [!NOTE]

    > <span data-ttu-id="566cc-146">此联机编码体验处于预览模式。</span><span class="sxs-lookup"><span data-stu-id="566cc-146">This online coding experience is in preview mode.</span></span> <span data-ttu-id="566cc-147">如果遇到问题，请[在 dotnet/try 存储库上](https://github.com/dotnet/try/issues)进行报告。</span><span class="sxs-lookup"><span data-stu-id="566cc-147">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="566cc-148">探索整数运算精度和限值</span><span class="sxs-lookup"><span data-stu-id="566cc-148">Explore integer precision and limits</span></span>
  durationInMinutes: 5
  content: >
    <span data-ttu-id="566cc-149">在上一个示例中，整数除法截断了结果。</span><span class="sxs-lookup"><span data-stu-id="566cc-149">That last sample showed you that integer division truncates the result.</span></span>

    <span data-ttu-id="566cc-150">可以使用取模运算符（即 `%` 字符）计算余数：</span><span class="sxs-lookup"><span data-stu-id="566cc-150">You can get the **remainder** by using the **modulo** operator, the `%` character:</span></span>


    ```csharp

    int a = 7;

    int b = 4;

    int c = 3;

    int d = (a  + b) / c;

    int e = (a + b) % c;

    Console.WriteLine($"quotient: {d}");

    Console.WriteLine($"remainder: {e}");

    ```


    <span data-ttu-id="566cc-151">C# 整数类型不同于数学上的整数的另一点是，`int` 类型有最小限值和最大限值。</span><span class="sxs-lookup"><span data-stu-id="566cc-151">The C# integer type differs from mathematical integers in one other way: the `int` type has minimum and maximum limits.</span></span> <span data-ttu-id="566cc-152">在交互式窗口中，运行以下代码，看看这些限值的运行机制如何：</span><span class="sxs-lookup"><span data-stu-id="566cc-152">Run this code in the interactive window to see those limits:</span></span>


    ```csharp

    int max = int.MaxValue;

    int min = int.MinValue;

    Console.WriteLine($"The range of integers is {min} to {max}");

    ```


    <span data-ttu-id="566cc-153">如果运算生成的值超过这些限值，则会出现下溢或溢出的情况。</span><span class="sxs-lookup"><span data-stu-id="566cc-153">If a calculation produces a value that exceeds those limits, you have an **underflow** or **overflow** condition.</span></span> <span data-ttu-id="566cc-154">答案似乎是从一个限值覆盖到另一个限值的范围。</span><span class="sxs-lookup"><span data-stu-id="566cc-154">The answer appears to wrap from one limit to the other.</span></span> <span data-ttu-id="566cc-155">例如，将以下两行代码添加到交互式窗口中：</span><span class="sxs-lookup"><span data-stu-id="566cc-155">Add these two lines to the interactive window to see an example:</span></span>


    ```csharp

    int what = max + 3;

    Console.WriteLine($"An example of overflow: {what}");

    ```


    <span data-ttu-id="566cc-156">可以看到，答案非常接近最小（负）整数。</span><span class="sxs-lookup"><span data-stu-id="566cc-156">Notice that the answer is very close to the minimum (negative) integer.</span></span> <span data-ttu-id="566cc-157">与 `min + 2` 相同。</span><span class="sxs-lookup"><span data-stu-id="566cc-157">It's the same as `min + 2`.</span></span>

    <span data-ttu-id="566cc-158">加法运算会让整数溢出允许的值。</span><span class="sxs-lookup"><span data-stu-id="566cc-158">The addition operation **overflowed** the allowed values for integers.</span></span>

    <span data-ttu-id="566cc-159">答案是一个非常大的负数，因为溢出从最大整数值覆盖回最小整数值。</span><span class="sxs-lookup"><span data-stu-id="566cc-159">The answer is a very large negative number because an overflow "wraps around" from the largest possible integer value to the smallest.</span></span>


    <span data-ttu-id="566cc-160">如果 `int` 类型无法满足需求，还会用到限值和精度不同的其他数字类型。</span><span class="sxs-lookup"><span data-stu-id="566cc-160">There are other numeric types with different limits and precision that you would use when the `int` type doesn't meet your needs.</span></span> <span data-ttu-id="566cc-161">接下来，将探索这些类型。</span><span class="sxs-lookup"><span data-stu-id="566cc-161">Let's explore those next.</span></span>


    > [!NOTE]

    > <span data-ttu-id="566cc-162">此联机编码体验处于预览模式。</span><span class="sxs-lookup"><span data-stu-id="566cc-162">This online coding experience is in preview mode.</span></span> <span data-ttu-id="566cc-163">如果遇到问题，请[在 dotnet/try 存储库上](https://github.com/dotnet/try/issues)进行报告。</span><span class="sxs-lookup"><span data-stu-id="566cc-163">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="566cc-164">使用双精度类型</span><span class="sxs-lookup"><span data-stu-id="566cc-164">Work with the double type</span></span>
  durationInMinutes: 5
  content: >
    <span data-ttu-id="566cc-165">`double` 数字类型表示双精度浮点数。</span><span class="sxs-lookup"><span data-stu-id="566cc-165">The `double` numeric type represents a double-precision floating point number.</span></span> <span data-ttu-id="566cc-166">这些词可能是第一次听说。</span><span class="sxs-lookup"><span data-stu-id="566cc-166">Those terms may be new to you.</span></span> <span data-ttu-id="566cc-167">浮点数可用于表示数量级可能非常大或非常小的非整数。</span><span class="sxs-lookup"><span data-stu-id="566cc-167">A **floating point** number is useful to represent non-integral numbers that may be very large or small in magnitude.</span></span> <span data-ttu-id="566cc-168">双精度意味着存储这些数字时使用的精度高于单精度。</span><span class="sxs-lookup"><span data-stu-id="566cc-168">**Double-precision** means that these numbers are stored using greater precision than **single-precision**.</span></span> <span data-ttu-id="566cc-169">在新式计算机上，使用双精度数字比使用单精度数字更为常见。</span><span class="sxs-lookup"><span data-stu-id="566cc-169">On modern computers, it is more common to use double precision than single precision numbers.</span></span>

    <span data-ttu-id="566cc-170">接下来，将探索双精度类型。</span><span class="sxs-lookup"><span data-stu-id="566cc-170">Let's explore.</span></span> <span data-ttu-id="566cc-171">在交互式窗口中，试运行以下代码，看看结果如何：</span><span class="sxs-lookup"><span data-stu-id="566cc-171">Try the following code in the interactive window and see the result:</span></span>


    ```csharp

    double a = 5;

    double b = 4;

    double c = 2;

    double d = (a  + b) / c;

    Console.WriteLine(d);

    ```


    <span data-ttu-id="566cc-172">可以看到，答案商包含小数部分。</span><span class="sxs-lookup"><span data-stu-id="566cc-172">Notice that the answer includes the decimal portion of the quotient.</span></span> <span data-ttu-id="566cc-173">试试对双精度类型使用更复杂一点的表达式：</span><span class="sxs-lookup"><span data-stu-id="566cc-173">Try a slightly more complicated expression with doubles:</span></span>


    ```csharp

    double a = 19;

    double b = 23;

    double c = 8;

    double d = (a  + b) / c;

    Console.WriteLine(d);

    ```


    <span data-ttu-id="566cc-174">双精度值的范围远大于整数值。</span><span class="sxs-lookup"><span data-stu-id="566cc-174">The range of a double value is much greater than integer values.</span></span> <span data-ttu-id="566cc-175">在交互式窗口中，试运行以下代码：</span><span class="sxs-lookup"><span data-stu-id="566cc-175">Try the following code in the interactive window:</span></span>


    ```csharp

    double max = double.MaxValue;

    double min = double.MinValue;

    Console.WriteLine($"The range of double is {min} to {max}");

    ```


    <span data-ttu-id="566cc-176">打印出来的这些值用科学记数法表示。</span><span class="sxs-lookup"><span data-stu-id="566cc-176">These values are printed out in scientific notation.</span></span> <span data-ttu-id="566cc-177">`E` 左侧为有效数字。</span><span class="sxs-lookup"><span data-stu-id="566cc-177">The number to the left of the `E` is the significand.</span></span> <span data-ttu-id="566cc-178">右侧为是 10 的 n 次幂。</span><span class="sxs-lookup"><span data-stu-id="566cc-178">The number to the right is the exponent, as a power of 10.</span></span>


    <span data-ttu-id="566cc-179">与数学上的十进制数字一样，C# 中的双精度值可能会有四舍五入误差。</span><span class="sxs-lookup"><span data-stu-id="566cc-179">Just like decimal numbers in math, doubles in C# can have rounding errors.</span></span> <span data-ttu-id="566cc-180">试运行以下代码：</span><span class="sxs-lookup"><span data-stu-id="566cc-180">Try this code:</span></span>


    ```csharp

    double third = 1.0 / 3.0;

    Console.WriteLine(third);

    ```


    <span data-ttu-id="566cc-181">众所周知，`0.3` 循环小数与 `1/3` 并不完全相等。</span><span class="sxs-lookup"><span data-stu-id="566cc-181">You know that `0.3` repeating is not exactly the same as `1/3`.</span></span>


    <span data-ttu-id="566cc-182">***挑战***</span><span class="sxs-lookup"><span data-stu-id="566cc-182">***Challenge***</span></span>


    <span data-ttu-id="566cc-183">尝试使用 `double` 类型执行其他的大小数、乘法和除法运算。</span><span class="sxs-lookup"><span data-stu-id="566cc-183">Try other calculations with large numbers, small numbers, multiplication and division using the `double` type.</span></span>  <span data-ttu-id="566cc-184">尝试执行更复杂的运算。</span><span class="sxs-lookup"><span data-stu-id="566cc-184">Try more complicated calculations.</span></span>


    > [!NOTE]

    > <span data-ttu-id="566cc-185">此联机编码体验处于预览模式。</span><span class="sxs-lookup"><span data-stu-id="566cc-185">This online coding experience is in preview mode.</span></span> <span data-ttu-id="566cc-186">如果遇到问题，请[在 dotnet/try 存储库上](https://github.com/dotnet/try/issues)进行报告。</span><span class="sxs-lookup"><span data-stu-id="566cc-186">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="566cc-187">使用固定点类型</span><span class="sxs-lookup"><span data-stu-id="566cc-187">Work with fixed point types</span></span>
  durationInMinutes: 8
  content: >
    <span data-ttu-id="566cc-188">大家已学习了 C# 中的基本数字类型，即整数和双精度。</span><span class="sxs-lookup"><span data-stu-id="566cc-188">You've seen the basic numeric types in C#: integers and doubles.</span></span>  <span data-ttu-id="566cc-189">下面将介绍另一种需要了解的类型，即 `decimal` 类型。</span><span class="sxs-lookup"><span data-stu-id="566cc-189">There is one other type to learn: the `decimal` type.</span></span> <span data-ttu-id="566cc-190">`decimal` 类型的范围较小，但精度高于 `double`。</span><span class="sxs-lookup"><span data-stu-id="566cc-190">The `decimal` type has a smaller range but greater precision than `double`.</span></span> <span data-ttu-id="566cc-191">“固定点”一词意味着，十进制小数点（或二进制小数点）不会移动。</span><span class="sxs-lookup"><span data-stu-id="566cc-191">The term **fixed point** means that the decimal point (or binary point) doesn't move.</span></span> <span data-ttu-id="566cc-192">让我们来实际操作一下：</span><span class="sxs-lookup"><span data-stu-id="566cc-192">Let's take a look:</span></span>


    ```csharp

    decimal min = decimal.MinValue;

    decimal max = decimal.MaxValue;

    Console.WriteLine($"The range of the decimal type is {min} to {max}");

    ```


    <span data-ttu-id="566cc-193">可以看到，范围小于 `double` 类型。</span><span class="sxs-lookup"><span data-stu-id="566cc-193">Notice that the range is smaller than the `double` type.</span></span> <span data-ttu-id="566cc-194">通过试运行以下代码，可以看到十进制类型的精度更高：</span><span class="sxs-lookup"><span data-stu-id="566cc-194">You can see the greater precision with the decimal type by trying the following code:</span></span>


    ```csharp

    double a = 1.0;

    double b = 3.0;

    Console.WriteLine(a / b);


    decimal c = 1.0M;

    decimal d = 3.0M;

    Console.WriteLine(c / d);

    ```


    <span data-ttu-id="566cc-195">数字中的 `M` 后缀指明了常数应如何使用 `decimal` 类型。</span><span class="sxs-lookup"><span data-stu-id="566cc-195">The `M` suffix on the numbers is how you indicate that a constant should use the `decimal` type.</span></span>


    <span data-ttu-id="566cc-196">可以看到，使用十进制类型执行数学运算时，十进制小数点右侧的数字更多。</span><span class="sxs-lookup"><span data-stu-id="566cc-196">Notice that the math using the decimal type has more digits to the right of the decimal point.</span></span>


    <span data-ttu-id="566cc-197">***挑战***</span><span class="sxs-lookup"><span data-stu-id="566cc-197">***Challenge***</span></span>


    <span data-ttu-id="566cc-198">至此，大家已了解不同的数字类型。请编写代码来计算圆面积（其中，半径为 2.50 厘米）。</span><span class="sxs-lookup"><span data-stu-id="566cc-198">Now that you've seen the different numeric types, write code that calculates the area of a circle whose radius is 2.50 centimeters.</span></span> <span data-ttu-id="566cc-199">请注意，圆面积是用半径的平方乘以 PI 进行计算。</span><span class="sxs-lookup"><span data-stu-id="566cc-199">Remember that the area of a circle is the radius squared multiplied by PI.</span></span> <span data-ttu-id="566cc-200">小提示：.NET 包含 PI 常数 <xref:System.Math.PI?displayProperty=nameWithType>，可用于相应的值计算。</span><span class="sxs-lookup"><span data-stu-id="566cc-200">One hint: .NET contains a constant for PI, <xref:System.Math.PI?displayProperty=nameWithType> that you can use for that value.</span></span>


    > [!NOTE]

    > <span data-ttu-id="566cc-201">此联机编码体验处于预览模式。</span><span class="sxs-lookup"><span data-stu-id="566cc-201">This online coding experience is in preview mode.</span></span> <span data-ttu-id="566cc-202">如果遇到问题，请[在 dotnet/try 存储库上](https://github.com/dotnet/try/issues)进行报告。</span><span class="sxs-lookup"><span data-stu-id="566cc-202">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>


    <span data-ttu-id="566cc-203">你应获得 19 和 20 之间的答案。</span><span class="sxs-lookup"><span data-stu-id="566cc-203">You should get an answer between 19 and 20.</span></span>
- title: <span data-ttu-id="566cc-204">完成挑战</span><span class="sxs-lookup"><span data-stu-id="566cc-204">Complete challenge</span></span>
  durationInMinutes: 1
  content: >
    <span data-ttu-id="566cc-205">最后是否生成如下代码？</span><span class="sxs-lookup"><span data-stu-id="566cc-205">Did you come up with something like this?</span></span>


    ```csharp

    double radius = 2.50;

    double area = Math.PI * radius * radius;

    Console.WriteLine(area);

    ```


    <span data-ttu-id="566cc-206">如果需要，可以试用一些其他公式。</span><span class="sxs-lookup"><span data-stu-id="566cc-206">Try some other formulas if you'd like.</span></span>


    > [!NOTE]

    > <span data-ttu-id="566cc-207">此联机编码体验处于预览模式。</span><span class="sxs-lookup"><span data-stu-id="566cc-207">This online coding experience is in preview mode.</span></span> <span data-ttu-id="566cc-208">如果遇到问题，请[在 dotnet/try 存储库上](https://github.com/dotnet/try/issues)进行报告。</span><span class="sxs-lookup"><span data-stu-id="566cc-208">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- content: >-
    <span data-ttu-id="566cc-209">你已完成“C# 中的数字”交互式教程。</span><span class="sxs-lookup"><span data-stu-id="566cc-209">You've completed the "Numbers in C#" interactive tutorial.</span></span> <span data-ttu-id="566cc-210">可单击下方的“分支和循环”链接开始下一个交互式教程，或者可访问 [.NET 站点](https://www.microsoft.com/net/learn/dotnet/hello-world-tutorial)下载 .NET Core SDK，在计算机上创建项目，并继续编码。</span><span class="sxs-lookup"><span data-stu-id="566cc-210">You can click the **Branches and Loops** link below to start the next interactive tutorial, or you can visit the [.NET site](https://www.microsoft.com/net/learn/dotnet/hello-world-tutorial) to download the .NET Core SDK, create a project on your machine, and keep coding.</span></span> <span data-ttu-id="566cc-211">“继续学习”步骤将带你回到教程中。</span><span class="sxs-lookup"><span data-stu-id="566cc-211">The "Keep Learning" step brings you back to these tutorials.</span></span>


    <span data-ttu-id="566cc-212">可以参阅下面的主题，详细了解 C# 中的数字：</span><span class="sxs-lookup"><span data-stu-id="566cc-212">You can learn more about numbers in C# in the following topics:</span></span>


    - [<span data-ttu-id="566cc-213">整型类型</span><span class="sxs-lookup"><span data-stu-id="566cc-213">Integral types</span></span>](../../language-reference/builtin-types/integral-numeric-types.md)

    - [<span data-ttu-id="566cc-214">浮点型表</span><span class="sxs-lookup"><span data-stu-id="566cc-214">Floating-Point Types Table</span></span>](../../language-reference/builtin-types/floating-point-numeric-types.md)

    - [<span data-ttu-id="566cc-215">内置类型表</span><span class="sxs-lookup"><span data-stu-id="566cc-215">Built-In Types Table</span></span>](../../language-reference/keywords/built-in-types-table.md)

    - [<span data-ttu-id="566cc-216">隐式数值转换表</span><span class="sxs-lookup"><span data-stu-id="566cc-216">Implicit Numeric Conversions Table</span></span>](../../language-reference/keywords/implicit-numeric-conversions-table.md)

    - [<span data-ttu-id="566cc-217">显式数值转换表</span><span class="sxs-lookup"><span data-stu-id="566cc-217">Explicit Numeric Conversions Table</span></span>](../../language-reference/keywords/explicit-numeric-conversions-table.md)
