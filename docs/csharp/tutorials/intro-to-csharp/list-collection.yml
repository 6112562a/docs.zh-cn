### YamlMime:Tutorial
title: <span data-ttu-id="7a466-101">了解如何使用泛型列表类型管理数据集合</span><span class="sxs-lookup"><span data-stu-id="7a466-101">Learn to manage data collections using the generic list type</span></span>
metadata:
  title: 数据集合 - C# 交互教程简介
  description: 在本教程中，读者将使用浏览器通过交互方式了解 C#。 读者可以直接在浏览器中编写 C# 代码，并查看代码编译和运行结果。
  audience: Developer
  ms.custom: mvc
  ms.date: 10/23/2018
  level: Beginner
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: 8ee13ec60f0504982c33ecc61940b731d320d2de
  ms.sourcegitcommit: c4e9d05644c9cb89de5ce6002723de107ea2e2c4
  ms.translationtype: HT
  ms.contentlocale: zh-CN
  ms.lasthandoff: 05/19/2019
  ms.locfileid: "65880563"
items:
- durationInMinutes: 1
  content: >
    <span data-ttu-id="7a466-105">本教程通过交互方式介绍了 C#，读者可以使用浏览器编写 C# 代码，并查看代码编译和运行结果。</span><span class="sxs-lookup"><span data-stu-id="7a466-105">This tutorial teaches you C# interactively, using your browser to write C# code and see the results of compiling and running your code.</span></span> <span data-ttu-id="7a466-106">它包含一系列有关创建、修改和探索集合和数组的课程。</span><span class="sxs-lookup"><span data-stu-id="7a466-106">It contains a series of lessons that create, modify, and explore collections and arrays.</span></span>
- title: <span data-ttu-id="7a466-107">创建列表</span><span class="sxs-lookup"><span data-stu-id="7a466-107">Create lists</span></span>
  durationInMinutes: 2
  content: >
    <span data-ttu-id="7a466-108">在交互式窗口中，运行以下代码。</span><span class="sxs-lookup"><span data-stu-id="7a466-108">Run the following code in the interactive window.</span></span> <span data-ttu-id="7a466-109">为此，请在交互式窗口中键入以下代码块（将 `<name>` 替换为自己的名称），再单击“运行”按钮：</span><span class="sxs-lookup"><span data-stu-id="7a466-109">To do that, type the following code block in the interactive window (replace `<name>` with your name) and click the **Run** button:</span></span>


    ```csharp

    var names = new List<string> { "<name>", "Ana", "Felipe" };

    foreach (var name in names)

    {
      Console.WriteLine($"Hello {name.ToUpper()}!");
    }

    ```


    <span data-ttu-id="7a466-110">你已创建了一个字符串列表，在该列表中添加了三个名称，并打印了所有大写的名称。</span><span class="sxs-lookup"><span data-stu-id="7a466-110">You've created a list of strings, added three names to that list, and printed out the names in all CAPS.</span></span> <span data-ttu-id="7a466-111">循环读取整个列表需要用到在前面的教程中学到的概念。</span><span class="sxs-lookup"><span data-stu-id="7a466-111">You're using concepts that you've learned in earlier tutorials to loop through the list.</span></span>


    <span data-ttu-id="7a466-112">用于显示名称的代码使用[字符串内插](../../language-reference/tokens/interpolated.md)功能。</span><span class="sxs-lookup"><span data-stu-id="7a466-112">The code to display names makes use of the [string interpolation](../../language-reference/tokens/interpolated.md) feature.</span></span> <span data-ttu-id="7a466-113">如果 `string` 前面有 `$`符号，可以在字符串声明中嵌入 C# 代码。</span><span class="sxs-lookup"><span data-stu-id="7a466-113">When you precede a `string` with the `$` character, you can embed C# code in the string declaration.</span></span> <span data-ttu-id="7a466-114">实际字符串使用自己生成的值替换该 C# 代码。</span><span class="sxs-lookup"><span data-stu-id="7a466-114">The actual string replaces that C# code with the value it generates.</span></span> <span data-ttu-id="7a466-115">在此示例中，`{name.ToUpper()}` 被替换为各个转换为大写字母的名称，因为调用了 <xref:System.String.ToUpper%2A?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="7a466-115">In this example, it replaces the `{name.ToUpper()}` with each name, converted to capital letters, because you called the <xref:System.String.ToUpper%2A?displayProperty=nameWithType> method.</span></span>


    <span data-ttu-id="7a466-116">接下来将进一步探索。</span><span class="sxs-lookup"><span data-stu-id="7a466-116">Let's keep exploring.</span></span>


    > [!NOTE]

    > <span data-ttu-id="7a466-117">此联机编码体验处于预览模式。</span><span class="sxs-lookup"><span data-stu-id="7a466-117">This online coding experience is in preview mode.</span></span> <span data-ttu-id="7a466-118">如果遇到问题，请[在 dotnet/try 存储库上](https://github.com/dotnet/try/issues)进行报告。</span><span class="sxs-lookup"><span data-stu-id="7a466-118">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="7a466-119">修改列表内容</span><span class="sxs-lookup"><span data-stu-id="7a466-119">Modify list contents</span></span>
  durationInMinutes: 3
  content: >
    <span data-ttu-id="7a466-120">创建的集合使用 <xref:System.Collections.Generic.List%601> 类型。</span><span class="sxs-lookup"><span data-stu-id="7a466-120">The collection you created uses the <xref:System.Collections.Generic.List%601> type.</span></span> <span data-ttu-id="7a466-121">此类型存储一系列元素。</span><span class="sxs-lookup"><span data-stu-id="7a466-121">This type stores sequences of elements.</span></span> <span data-ttu-id="7a466-122">元素类型是在尖括号内指定。</span><span class="sxs-lookup"><span data-stu-id="7a466-122">You specify the type of the elements between the angle brackets.</span></span>


    <span data-ttu-id="7a466-123"><xref:System.Collections.Generic.List%601> 类型的一个重要方面是，既可以扩大，也可以收缩，方便用户添加或删除元素。</span><span class="sxs-lookup"><span data-stu-id="7a466-123">One important aspect of this <xref:System.Collections.Generic.List%601> type is that it can grow or shrink, enabling you to add or remove elements.</span></span> <span data-ttu-id="7a466-124">在显示其内容后，通过修改内容，可以查看结果。</span><span class="sxs-lookup"><span data-stu-id="7a466-124">You can see the results by modifying the contents after you've displayed its contents.</span></span> <span data-ttu-id="7a466-125">在已编写的代码下方添加以下代码（在输出内容的循环下方）：</span><span class="sxs-lookup"><span data-stu-id="7a466-125">Add the following code below the code you've already written (below the loop that prints the contents):</span></span>


    ```csharp

    Console.WriteLine();

    names.Add("Maria");

    names.Add("Bill");

    names.Remove("Ana");

    foreach (var name in names)

    {
      Console.WriteLine($"Hello {name.ToUpper()}!");
    }

    ```


    <span data-ttu-id="7a466-126">又向列表的末尾添加了两个名称。</span><span class="sxs-lookup"><span data-stu-id="7a466-126">You've added two more names to the end of the list.</span></span> <span data-ttu-id="7a466-127">同时，也删除了一个名称。</span><span class="sxs-lookup"><span data-stu-id="7a466-127">You've also removed one as well.</span></span> <span data-ttu-id="7a466-128">此代码块的输出显示初始内容，然后输出一个空行和新内容。</span><span class="sxs-lookup"><span data-stu-id="7a466-128">The output from this block of code shows the initial contents, then prints a blank line and the new contents.</span></span>


    <span data-ttu-id="7a466-129">借助 <xref:System.Collections.Generic.List%601>，还可以按索引引用各项。</span><span class="sxs-lookup"><span data-stu-id="7a466-129">The <xref:System.Collections.Generic.List%601> enables you to reference individual items by **index** as well.</span></span> <span data-ttu-id="7a466-130">使用 `[` 和 `]` 令牌访问这些项。</span><span class="sxs-lookup"><span data-stu-id="7a466-130">You access items using the `[` and `]` tokens.</span></span> <span data-ttu-id="7a466-131">在已编写的代码下方添加以下代码，再试运行看看：</span><span class="sxs-lookup"><span data-stu-id="7a466-131">Add the following code below what you've already written and try it:</span></span>


    ```csharp

    Console.WriteLine($"My name is {names[0]}.");

    Console.WriteLine($"I've added {names[2]} and {names[3]} to the list.");

    ```


    <span data-ttu-id="7a466-132">不得访问超出列表末尾的项。</span><span class="sxs-lookup"><span data-stu-id="7a466-132">You're not allowed to access past the end of the list.</span></span> <span data-ttu-id="7a466-133">可以使用 <xref:System.Collections.Generic.List%601.Count%2A> 属性确定列表长度。</span><span class="sxs-lookup"><span data-stu-id="7a466-133">You can check how long the list is using the <xref:System.Collections.Generic.List%601.Count%2A> property.</span></span> <span data-ttu-id="7a466-134">添加以下代码，试运行看看：</span><span class="sxs-lookup"><span data-stu-id="7a466-134">Add the following code to try it:</span></span>


    ```csharp

    Console.WriteLine($"The list has {names.Count} people in it");

    ```


    <span data-ttu-id="7a466-135">再次单击“运行”，看看结果如何。</span><span class="sxs-lookup"><span data-stu-id="7a466-135">Click **Run** again to see the results.</span></span> <span data-ttu-id="7a466-136">在 C# 中，索引是从 0 开始编制，因此最大有效索引是用列表项数减 1 计算得出。</span><span class="sxs-lookup"><span data-stu-id="7a466-136">In C#, indices start at 0, so the largest valid index is one less than the number of items in the list.</span></span>


    > [!NOTE]

    > <span data-ttu-id="7a466-137">此联机编码体验处于预览模式。</span><span class="sxs-lookup"><span data-stu-id="7a466-137">This online coding experience is in preview mode.</span></span> <span data-ttu-id="7a466-138">如果遇到问题，请[在 dotnet/try 存储库上](https://github.com/dotnet/try/issues)进行报告。</span><span class="sxs-lookup"><span data-stu-id="7a466-138">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="7a466-139">搜索列表并进行排序</span><span class="sxs-lookup"><span data-stu-id="7a466-139">Search and sort lists</span></span>
  durationInMinutes: 5
  content: >
    <span data-ttu-id="7a466-140">我们的示例使用的列表较小，但大家的应用程序创建的列表通常可能会包含更多元素，有时可能会包含数以千计的元素。</span><span class="sxs-lookup"><span data-stu-id="7a466-140">Our samples use relatively small lists, but your applications may often create lists with many more elements, sometimes numbering in the thousands.</span></span> <span data-ttu-id="7a466-141">若要在更大的集合中查找元素，需要在列表中搜索不同的项。</span><span class="sxs-lookup"><span data-stu-id="7a466-141">To find elements in these larger collections, you need to search the list for different items.</span></span> <span data-ttu-id="7a466-142"><xref:System.Collections.Generic.List%601.IndexOf%2A> 方法可搜索项，并返回此项的索引。</span><span class="sxs-lookup"><span data-stu-id="7a466-142">The <xref:System.Collections.Generic.List%601.IndexOf%2A> method searches for an item and returns the index of the item.</span></span> <span data-ttu-id="7a466-143">试试此方法，看看它是如何工作的。</span><span class="sxs-lookup"><span data-stu-id="7a466-143">Try it to see how it works.</span></span>  <span data-ttu-id="7a466-144">在当前已编写的代码下方添加以下代码：</span><span class="sxs-lookup"><span data-stu-id="7a466-144">Add the following code below what you've written so far:</span></span>


    ```csharp

    var index = names.IndexOf("Felipe");

    if (index != -1)
      Console.WriteLine($"The name {names[index]} is at index {index}");

    var notFound = names.IndexOf("Not Found");
      Console.WriteLine($"When an item is not found, IndexOf returns {notFound}");
    ```


    <span data-ttu-id="7a466-145">可能无法确定列表是否包含某项，因此，应始终检查 <xref:System.Collections.Generic.List%601.IndexOf%2A> 返回的索引。</span><span class="sxs-lookup"><span data-stu-id="7a466-145">You may not know if an item is in the list, so you should always check the index returned by <xref:System.Collections.Generic.List%601.IndexOf%2A>.</span></span> <span data-ttu-id="7a466-146">如果索引为 -1，表明找不到相应项。</span><span class="sxs-lookup"><span data-stu-id="7a466-146">If it is -1, the item was not found.</span></span>


    <span data-ttu-id="7a466-147">还可以对列表中的项进行排序。</span><span class="sxs-lookup"><span data-stu-id="7a466-147">The items in your list can be sorted as well.</span></span> <span data-ttu-id="7a466-148"><xref:System.Collections.Generic.List%601.Sort%2A> 方法按正常顺序（按字母顺序，如果是字符串的话）对列表中的所有项进行排序。</span><span class="sxs-lookup"><span data-stu-id="7a466-148">The <xref:System.Collections.Generic.List%601.Sort%2A> method sorts all the items in the list in their normal order (alphabetically in the case of strings).</span></span> <span data-ttu-id="7a466-149">添加以下代码，再试运行看看：</span><span class="sxs-lookup"><span data-stu-id="7a466-149">Add this code and run again:</span></span>


    ```csharp

    names.Sort();

    foreach (var name in names)

    {
      Console.WriteLine($"Hello {name.ToUpper()}!");
    }

    ```


    > [!NOTE]

    > <span data-ttu-id="7a466-150">此联机编码体验处于预览模式。</span><span class="sxs-lookup"><span data-stu-id="7a466-150">This online coding experience is in preview mode.</span></span> <span data-ttu-id="7a466-151">如果遇到问题，请[在 dotnet/try 存储库上](https://github.com/dotnet/try/issues)进行报告。</span><span class="sxs-lookup"><span data-stu-id="7a466-151">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="7a466-152">其他类型的列表</span><span class="sxs-lookup"><span data-stu-id="7a466-152">Lists of other types</span></span>
  durationInMinutes: 5
  content: >
    <span data-ttu-id="7a466-153">到目前为止，大家一直在列表中使用 `string` 类型。</span><span class="sxs-lookup"><span data-stu-id="7a466-153">You've been using the `string` type in lists so far.</span></span> <span data-ttu-id="7a466-154">接下来，将让 <xref:System.Collections.Generic.List%601> 使用其他类型。</span><span class="sxs-lookup"><span data-stu-id="7a466-154">Let's make a <xref:System.Collections.Generic.List%601> using a different type.</span></span> <span data-ttu-id="7a466-155">那就生成一组数字吧。</span><span class="sxs-lookup"><span data-stu-id="7a466-155">Let's build a set of numbers.</span></span> <span data-ttu-id="7a466-156">删除迄今为止编写的代码，并将其替换为以下代码：</span><span class="sxs-lookup"><span data-stu-id="7a466-156">Delete the code you wrote so far, and replace it with the following code:</span></span>


    ```csharp

    var fibonacciNumbers = new List<int> {1, 1};

    ```


    <span data-ttu-id="7a466-157">这会创建一个整数列表，并将头两个整数设置为值 1。</span><span class="sxs-lookup"><span data-stu-id="7a466-157">That creates a list of integers, and sets the first two integers to the value 1.</span></span> <span data-ttu-id="7a466-158">斐波纳契数列，一串以两个 1 开头的数字。</span><span class="sxs-lookup"><span data-stu-id="7a466-158">The *Fibonacci Sequence*, a sequence of numbers, starts with two 1s.</span></span> <span data-ttu-id="7a466-159">斐波那契数列中的每个数字都是前两个数字之和。</span><span class="sxs-lookup"><span data-stu-id="7a466-159">Each next Fibonacci number is found by taking the sum of the previous two numbers.</span></span> <span data-ttu-id="7a466-160">添加以下代码：</span><span class="sxs-lookup"><span data-stu-id="7a466-160">Add this code:</span></span>


    ```csharp

    var previous = fibonacciNumbers[fibonacciNumbers.Count - 1];

    var previous2 = fibonacciNumbers[fibonacciNumbers.Count - 2];


    fibonacciNumbers.Add(previous + previous2);


    foreach(var item in fibonacciNumbers)
        Console.WriteLine(item);
    ```


    <span data-ttu-id="7a466-161">按“运行”，看看结果如何；</span><span class="sxs-lookup"><span data-stu-id="7a466-161">Press **Run** to see the results;</span></span>


    > [!NOTE]

    > <span data-ttu-id="7a466-162">此联机编码体验处于预览模式。</span><span class="sxs-lookup"><span data-stu-id="7a466-162">This online coding experience is in preview mode.</span></span> <span data-ttu-id="7a466-163">如果遇到问题，请[在 dotnet/try 存储库上](https://github.com/dotnet/try/issues)进行报告。</span><span class="sxs-lookup"><span data-stu-id="7a466-163">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="7a466-164">挑战</span><span class="sxs-lookup"><span data-stu-id="7a466-164">Challenge</span></span>
  durationInMinutes: 10
  content: >
    <span data-ttu-id="7a466-165">看看能不能将本课程中的一些概念与前面的课程融会贯通。</span><span class="sxs-lookup"><span data-stu-id="7a466-165">See if you can put together some of the concepts from this and earlier lessons.</span></span> <span data-ttu-id="7a466-166">使用斐波那契数列，扩展当前生成的程序。</span><span class="sxs-lookup"><span data-stu-id="7a466-166">Expand on what you've built so far with Fibonacci Numbers.</span></span> <span data-ttu-id="7a466-167">试着编写代码，生成此序列中的前 20 个数字。</span><span class="sxs-lookup"><span data-stu-id="7a466-167">Try and write the code to generate the first 20 numbers in the sequence.</span></span> <span data-ttu-id="7a466-168">（作为提示，第 20 个斐波纳契数是 6765。）</span><span class="sxs-lookup"><span data-stu-id="7a466-168">(As a hint, the 20th Fibonacci number is 6765.)</span></span>


    > [!NOTE]

    > <span data-ttu-id="7a466-169">此联机编码体验处于预览模式。</span><span class="sxs-lookup"><span data-stu-id="7a466-169">This online coding experience is in preview mode.</span></span> <span data-ttu-id="7a466-170">如果遇到问题，请[在 dotnet/try 存储库上](https://github.com/dotnet/try/issues)进行报告。</span><span class="sxs-lookup"><span data-stu-id="7a466-170">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="7a466-171">完成挑战</span><span class="sxs-lookup"><span data-stu-id="7a466-171">Complete challenge</span></span>
  durationInMinutes: 3
  content: >
    <span data-ttu-id="7a466-172">最后是否生成如下代码？</span><span class="sxs-lookup"><span data-stu-id="7a466-172">Did you come up with something like this?</span></span>


    ```csharp

    var fibonacciNumbers = new List<int> {1, 1};


    while (fibonacciNumbers.Count < 20)

    {
        var previous = fibonacciNumbers[fibonacciNumbers.Count - 1];
        var previous2 = fibonacciNumbers[fibonacciNumbers.Count - 2];

        fibonacciNumbers.Add(previous + previous2);
    }

    foreach(var item in fibonacciNumbers)
        Console.WriteLine(item);
    ```


    <span data-ttu-id="7a466-173">在循环的每次迭代中，取此列表中的最后两个整数进行求和，并将计算出的总和值添加到列表中。</span><span class="sxs-lookup"><span data-stu-id="7a466-173">With each iteration of the loop, you're taking the last two integers in the list, summing them, and adding that value to the list.</span></span> <span data-ttu-id="7a466-174">循环会一直重复运行到列表中有 20 个项为止。</span><span class="sxs-lookup"><span data-stu-id="7a466-174">The loop repeats until you've added 20 items to the list.</span></span>


    > [!NOTE]

    > <span data-ttu-id="7a466-175">此联机编码体验处于预览模式。</span><span class="sxs-lookup"><span data-stu-id="7a466-175">This online coding experience is in preview mode.</span></span> <span data-ttu-id="7a466-176">如果遇到问题，请[在 dotnet/try 存储库上](https://github.com/dotnet/try/issues)进行报告。</span><span class="sxs-lookup"><span data-stu-id="7a466-176">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- content: >-
    <span data-ttu-id="7a466-177">你已完成列表交互式教程。</span><span class="sxs-lookup"><span data-stu-id="7a466-177">You've completed the list interactive tutorial.</span></span> <span data-ttu-id="7a466-178">这是 C# 交互式教程的最终简介。</span><span class="sxs-lookup"><span data-stu-id="7a466-178">That's the final introduction to C# interactive tutorial.</span></span> <span data-ttu-id="7a466-179">可以访问 [.NET 站点](https://www.microsoft.com/net/learn/dotnet/hello-world-tutorial)下载 .NET Core SDK，在计算机上创建项目，并继续编码。</span><span class="sxs-lookup"><span data-stu-id="7a466-179">You can visit the [.NET site](https://www.microsoft.com/net/learn/dotnet/hello-world-tutorial) to download the .NET Core SDK, create a project on your machine, and keep coding.</span></span> <span data-ttu-id="7a466-180">“继续学习”步骤将带你返回到这些教程以在计算机上生成项目。</span><span class="sxs-lookup"><span data-stu-id="7a466-180">The "Keep Learning" step brings you back to these tutorials to build projects on your machine.</span></span>


    <span data-ttu-id="7a466-181">可以在以下文章中了解有关 [.NET 集合](../../../standard/collections/index.md)的详细信息：</span><span class="sxs-lookup"><span data-stu-id="7a466-181">You can learn more about [.NET collections](../../../standard/collections/index.md) in the following articles:</span></span>

    - [<span data-ttu-id="7a466-182">选择集合类型</span><span class="sxs-lookup"><span data-stu-id="7a466-182">Selecting a collection type</span></span>](../../../standard/collections/selecting-a-collection-class.md)

    - [<span data-ttu-id="7a466-183">常用的集合类型</span><span class="sxs-lookup"><span data-stu-id="7a466-183">Commonly used collection types</span></span>](../../../standard/collections/commonly-used-collection-types.md)

    - [<span data-ttu-id="7a466-184">何时使用泛型集合</span><span class="sxs-lookup"><span data-stu-id="7a466-184">When to use generic collections</span></span>](../../../standard/collections/when-to-use-generic-collections.md)
