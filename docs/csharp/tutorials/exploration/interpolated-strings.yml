### YamlMime:Tutorial
title: <span data-ttu-id="d5962-101">使用字符串内插构造格式化字符串</span><span class="sxs-lookup"><span data-stu-id="d5962-101">Use string interpolation to construct formatted strings</span></span>
metadata:
  title: 字符串内插 - C# 交互式教程
  description: 在本教程中，你可通过浏览器以交互方式探索 C# 字符串内插功能。 读者可以直接在浏览器中编写 C# 代码，并查看代码编译和运行结果。
  audience: Developer
  ms.custom: mvc
  ms.date: 08/24/2018
  level: Beginner
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: 70d63f460ad2e67fe60cd8d5130e8ff22889d8be
  ms.sourcegitcommit: 96543603ae29bc05cecccb8667974d058af63b4a
  ms.translationtype: HT
  ms.contentlocale: zh-CN
  ms.lasthandoff: 05/24/2019
  ms.locfileid: "66195947"
items:
- durationInMinutes: 2
  content: >
    <span data-ttu-id="d5962-105">本教程介绍了如何使用[字符串内插](../../language-reference/tokens/interpolated.md)将值插入单个字符串中。</span><span class="sxs-lookup"><span data-stu-id="d5962-105">This tutorial teaches you how to use [string interpolation](../../language-reference/tokens/interpolated.md) to insert values into a single string.</span></span> <span data-ttu-id="d5962-106">还介绍了如何控制结果字符串的文本格式设置。</span><span class="sxs-lookup"><span data-stu-id="d5962-106">You also learn how to control text formatting of the result string.</span></span> <span data-ttu-id="d5962-107">可以使用浏览器编写和运行 C# 代码，并即时查看结果。</span><span class="sxs-lookup"><span data-stu-id="d5962-107">You use your browser to write and run C# code and can immediately see the results.</span></span>
- title: <span data-ttu-id="d5962-108">创建内插字符串</span><span class="sxs-lookup"><span data-stu-id="d5962-108">Create an interpolated string</span></span>
  durationInMinutes: 2
  content: >
    <span data-ttu-id="d5962-109">在交互式窗口中，运行以下代码。</span><span class="sxs-lookup"><span data-stu-id="d5962-109">Run the following code in the interactive window.</span></span> <span data-ttu-id="d5962-110">为此，请在交互式窗口中键入代码（将“`<name>`”替换为自己的姓名），然后选择“运行”：</span><span class="sxs-lookup"><span data-stu-id="d5962-110">To do that, type the code in the interactive window (replace `<name>` with your name) and select **Run**:</span></span>


    ```csharp

    var name = "<name>";

    Console.WriteLine($"Hello, {name}. It's a pleasure to meet you!");

    ```


    <span data-ttu-id="d5962-111">运行该代码时，“输出”会在问候语中显示一个包含你的姓名的字符串。</span><span class="sxs-lookup"><span data-stu-id="d5962-111">When you run the code, **Output** displays a string that includes your name in the greeting.</span></span> <span data-ttu-id="d5962-112"><xref:System.Console.WriteLine%2A> 方法调用的字符串参数是一个内插字符串表达式。</span><span class="sxs-lookup"><span data-stu-id="d5962-112">The string argument of the <xref:System.Console.WriteLine%2A> method call is an *interpolated string expression*.</span></span> <span data-ttu-id="d5962-113">这是一种模板，可让你用包含嵌入代码的字符串构造单个字符串（称为结果字符串）。</span><span class="sxs-lookup"><span data-stu-id="d5962-113">It's a kind of template that lets you construct a single string (called the *result string*) from a string that includes embedded code.</span></span> <span data-ttu-id="d5962-114">内插字符串表达式特别适用于将值插入字符串或连接多个字符串（将字符串联在一起）。</span><span class="sxs-lookup"><span data-stu-id="d5962-114">Interpolated string expressions are particularly useful for inserting values into a string or concatenating (joining together) several strings.</span></span>


    <span data-ttu-id="d5962-115">以上示例包含了每个内插字符串表达式必须具备的两个元素：</span><span class="sxs-lookup"><span data-stu-id="d5962-115">The example above contains the two elements that every interpolated string expression must have:</span></span>


    - <span data-ttu-id="d5962-116">字符串文本以 `$` 字符开头，后接左双引号字符。</span><span class="sxs-lookup"><span data-stu-id="d5962-116">A string literal that begins with the `$` character before its opening quotation mark character.</span></span> <span data-ttu-id="d5962-117">`$` 符号和引号字符之间不能有空格。</span><span class="sxs-lookup"><span data-stu-id="d5962-117">There can't be any spaces between the `$` symbol and the quotation mark character.</span></span> <span data-ttu-id="d5962-118">（如果希望看到包含空格会发生什么情况，请在交互式窗口中的 `$` 字符后面插入一个空格，然后运行更新的代码。</span><span class="sxs-lookup"><span data-stu-id="d5962-118">(If you'd like to see what happens if you include one, insert a space after the `$` character in the interactive window and run the updated code.</span></span> <span data-ttu-id="d5962-119">C# 编译器报错“意外的字符 '$'”。）</span><span class="sxs-lookup"><span data-stu-id="d5962-119">The C# compiler complains, "Unexpected character '$'".)</span></span>


    - <span data-ttu-id="d5962-120">一个或多个内插表达式。</span><span class="sxs-lookup"><span data-stu-id="d5962-120">One or more *interpolation expressions*.</span></span> <span data-ttu-id="d5962-121">左大括号和右大括号（`{` 和 `}`）指示内插表达式。</span><span class="sxs-lookup"><span data-stu-id="d5962-121">An interpolation expression is indicated by an opening and closing brace (`{` and `}`).</span></span> <span data-ttu-id="d5962-122">可将任何返回值的 C# 表达式置于大括号内（包括 `null`）。</span><span class="sxs-lookup"><span data-stu-id="d5962-122">You can put any C# expression that returns a value (including `null`) inside the braces.</span></span>


    <span data-ttu-id="d5962-123">下面再尝试一些其他数据类型的字符串内插示例。</span><span class="sxs-lookup"><span data-stu-id="d5962-123">Let's try a few more string interpolation examples with some other data types.</span></span>


    > [!NOTE]

    > <span data-ttu-id="d5962-124">此联机编码体验处于预览模式。</span><span class="sxs-lookup"><span data-stu-id="d5962-124">This online coding experience is in preview mode.</span></span> <span data-ttu-id="d5962-125">如果遇到问题，请[在 dotnet/try 存储库上](https://github.com/dotnet/try/issues)进行报告。</span><span class="sxs-lookup"><span data-stu-id="d5962-125">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="d5962-126">包含不同的数据类型</span><span class="sxs-lookup"><span data-stu-id="d5962-126">Include different data types</span></span>
  durationInMinutes: 5
  content: "<span data-ttu-id=\"d5962-127\">上一步使用了字符串内插将一个字符串插入到了另一字符串中。</span><span class=\"sxs-lookup\"><span data-stu-id=\"d5962-127\">In the previous step, you used string interpolation to insert one string inside of another.</span></span> <span data-ttu-id=\"d5962-128\">不过，作为内插字符串表达式一部分的各个内插表达式可以是任何数据类型。</span><span class=\"sxs-lookup\"><span data-stu-id=\"d5962-128\">Each interpolation expression that is part of an interpolated string expression can be of any data type, though.</span></span> <span data-ttu-id=\"d5962-129\">下面让我们在内插字符串中添加多种数据类型表达式的值。</span><span class=\"sxs-lookup\"><span data-stu-id=\"d5962-129\">Let's include values of various data type expressions in an interpolated string.</span></span>\n\n<span data-ttu-id=\"d5962-130\">在以下示例中，我们首先定义了具有 `Name`、`Price` 和 `perPackage` 成员的 [tuple](../../tuples.md)。</span><span class=\"sxs-lookup\"><span data-stu-id=\"d5962-130\">In the following example, we first define a [tuple](../../tuples.md) that has `Name`, `Price`, and `perPackage` members.</span></span> <span data-ttu-id=\"d5962-131\">在交互式窗口中运行以下代码：</span><span class=\"sxs-lookup\"><span data-stu-id=\"d5962-131\">Run the following code in the interactive window:</span></span>\n\n```csharp\nvar item = (Name: \"eggplant\", Price: 1.99m, perPackage: 3);\nvar date = DateTime.Now;\nConsole.WriteLine($\"On {date}, the price of {item.Name} was {item.Price:C2} per {item.perPackage} items.\");\n```\n\n<span data-ttu-id=\"d5962-132\">注意，内插字符串中的内插表达式 `item.Price` 会解析为结果字符串中的“1.99”文本。</span><span class=\"sxs-lookup\"><span data-stu-id=\"d5962-132\">Note that the interpolation expression `item.Price` in the interpolated string resolves to the text \"1.99\" in the result string.</span></span> <span data-ttu-id=\"d5962-133\">这是因为，当表达式结果的类型不是字符串时，会按照以下方式将其解析为字符串：</span><span class=\"sxs-lookup\"><span data-stu-id=\"d5962-133\">That's because, when the type of the expression result is not a string, the result is resolved to a string in the following way:</span></span>\n\n- <span data-ttu-id=\"d5962-134\">如果内插表达式的计算结果为 `null`，则会使用一个空字符串（\"\" 或 <xref:System.String.Empty?displayProperty=nameWithType>）。</span><span class=\"sxs-lookup\"><span data-stu-id=\"d5962-134\">If the interpolation expression evaluates to `null`, an empty string (\"\", or <xref:System.String.Empty?displayProperty=nameWithType>) is used.</span></span>\n\n- <span data-ttu-id=\"d5962-135\">如果内插表达式的计算结果不是 `null`，通常会调用结果表达式的 `ToString` 方法。</span><span class=\"sxs-lookup\"><span data-stu-id=\"d5962-135\">If the interpolation expression doesn't evaluate to `null`, typically the `ToString` method of the result expression is called.</span></span> \n\n<span data-ttu-id=\"d5962-136\">在此示例的输出中，日期过于精确（eggplant 的价格不会以秒为单位变化），且价格值没有标明货币单位。</span><span class=\"sxs-lookup\"><span data-stu-id=\"d5962-136\">In the output from this example, the date is too precise (the price of eggplant doesn't change every second), and the price value doesn't indicate a unit of currency.</span></span> <span data-ttu-id=\"d5962-137\">下一步将介绍如何通过控制表达式结果的字符串表示形式来解决这些问题。</span><span class=\"sxs-lookup\"><span data-stu-id=\"d5962-137\">In the next step, you'll learn how to fix those issues by controlling the format of string representations of the expression results.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"d5962-138\">此联机编码体验处于预览模式。</span><span class=\"sxs-lookup\"><span data-stu-id=\"d5962-138\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"d5962-139\">如果遇到问题，请[在 dotnet/try 存储库上](https://github.com/dotnet/try/issues)进行报告。</span><span class=\"sxs-lookup\"><span data-stu-id=\"d5962-139\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: <span data-ttu-id="d5962-140">控制内插表达式的格式</span><span class="sxs-lookup"><span data-stu-id="d5962-140">Control the formatting of interpolation expressions</span></span>
  durationInMinutes: 5
  content: >
    <span data-ttu-id="d5962-141">上一步将两个格式不正确的字符串插入到了结果字符串中。</span><span class="sxs-lookup"><span data-stu-id="d5962-141">In the previous step, two poorly formatted strings were inserted into the result string.</span></span> <span data-ttu-id="d5962-142">一个是日期和时间值，只有日期是合适的。</span><span class="sxs-lookup"><span data-stu-id="d5962-142">One was a date and time value for which only the date was appropriate.</span></span> <span data-ttu-id="d5962-143">第二个是没有标明货币单位的价格。</span><span class="sxs-lookup"><span data-stu-id="d5962-143">The second was a price that didn't indicate its unit of currency.</span></span> <span data-ttu-id="d5962-144">这两个问题都很容易解决。</span><span class="sxs-lookup"><span data-stu-id="d5962-144">Both issues are easy to address.</span></span> <span data-ttu-id="d5962-145">通过字符串内插，可以指定用于控制特定类型格式的格式字符串。</span><span class="sxs-lookup"><span data-stu-id="d5962-145">String interpolation lets you specify *format strings* that control the formatting of particular types.</span></span> <span data-ttu-id="d5962-146">将前面示例中的调用修改为 `Console.WriteLine`，从而包含日期和价格表达式的格式字符串，如以下行所示：</span><span class="sxs-lookup"><span data-stu-id="d5962-146">Modify the call to `Console.WriteLine` from the previous example to include the format strings for the date and price expressions as shown in the following line:</span></span>


    ```csharp

    Console.WriteLine($"On {date:d}, the price of {item.Name} was {item.Price} per {item.perPackage} items");

    ```


    <span data-ttu-id="d5962-147">可通过在内插表达式后接冒号（“:”）和格式字符串来指定格式字符串。</span><span class="sxs-lookup"><span data-stu-id="d5962-147">You specify a format string by following the interpolation expression with a colon (":") and the format string.</span></span> <span data-ttu-id="d5962-148">“d”是[标准日期和时间格式字符串](../../../standard/base-types/standard-date-and-time-format-strings.md#the-short-date-d-format-specifier)，表示短日期格式。</span><span class="sxs-lookup"><span data-stu-id="d5962-148">"d" is a [standard date and time format string](../../../standard/base-types/standard-date-and-time-format-strings.md#the-short-date-d-format-specifier) that represents the short date format.</span></span> <span data-ttu-id="d5962-149">“C2”是[标准数值格式字符串](../../../standard/base-types/standard-numeric-format-strings.md#the-currency-c-format-specifier)，用数字表示货币值（精确到小数点后两位）。</span><span class="sxs-lookup"><span data-stu-id="d5962-149">"C2" is a [standard numeric format string](../../../standard/base-types/standard-numeric-format-strings.md#the-currency-c-format-specifier) that represents a number as a currency value with two digits after the decimal point.</span></span>


    <span data-ttu-id="d5962-150">.NET 库中的许多类型支持一组预定义的格式字符串。</span><span class="sxs-lookup"><span data-stu-id="d5962-150">A number of types in the .NET libraries support a predefined set of format strings.</span></span> <span data-ttu-id="d5962-151">这些格式字符串包括所有数值类型以及日期和时间类型。</span><span class="sxs-lookup"><span data-stu-id="d5962-151">These include all the numeric types and the date and time types.</span></span> <span data-ttu-id="d5962-152">有关支持格式字符串的完整类型列表，请参阅 [.NET 中的格式化类型](../../../standard/base-types/formatting-types.md)文章中的[格式字符串和. NET 类库类型](../../../standard/base-types/formatting-types.md#stringRef)。</span><span class="sxs-lookup"><span data-stu-id="d5962-152">For a complete list of types that support format strings, see [Format Strings and .NET Class Library Types](../../../standard/base-types/formatting-types.md#stringRef) in the [Formatting Types in .NET](../../../standard/base-types/formatting-types.md) article.</span></span>


    <span data-ttu-id="d5962-153">尝试修改示例中的格式字符串，查看更改如何影响日期、时间和数值的格式。</span><span class="sxs-lookup"><span data-stu-id="d5962-153">Try modifying the format strings in the example to see how they affect the formatting of the date and time and the numeric value.</span></span> <span data-ttu-id="d5962-154">将 `{date:d}` 中的“d”更改为“t”（显示短时间格式）、“y”（显示年份和月份）和“yyyy”（显示四位数年份）。</span><span class="sxs-lookup"><span data-stu-id="d5962-154">Change the "d" in `{date:d}` to "t" (to display the short time format), "y" (to display the year and month), and "yyyy" (to display the year as a four-digit number).</span></span> <span data-ttu-id="d5962-155">将 `{price:C2}` 中的“C2”更改为“e”（用于指数计数法）和“F3”（使数值在小数点后保持三位数字）。</span><span class="sxs-lookup"><span data-stu-id="d5962-155">Change the "C2" in `{price:C2}` to "e" (for exponential notation) and "F3" (for a numeric value with three digits after the decimal point).</span></span>


    <span data-ttu-id="d5962-156">除了控制格式之外，还可以控制结果字符串中包含的格式字符串的字段宽度和对齐方式。</span><span class="sxs-lookup"><span data-stu-id="d5962-156">In addition to controlling formatting, you can also control the field width and alignment of the formatted strings that are included in the result string.</span></span> <span data-ttu-id="d5962-157">下一步将介绍如何执行此操作。</span><span class="sxs-lookup"><span data-stu-id="d5962-157">In the next step, you'll learn how to do this.</span></span>


    > [!NOTE]

    > <span data-ttu-id="d5962-158">此联机编码体验处于预览模式。</span><span class="sxs-lookup"><span data-stu-id="d5962-158">This online coding experience is in preview mode.</span></span> <span data-ttu-id="d5962-159">如果遇到问题，请[在 dotnet/try 存储库上](https://github.com/dotnet/try/issues)进行报告。</span><span class="sxs-lookup"><span data-stu-id="d5962-159">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="d5962-160">控制内插表达式的字段宽度和对齐方式</span><span class="sxs-lookup"><span data-stu-id="d5962-160">Control the field width and alignment of interpolation expressions</span></span>
  durationInMinutes: 6
  content: >
    <span data-ttu-id="d5962-161">通常，当内插字符串表达式的结果格式化为字符串时，结果字符串中会包含该字符串，但没有前导或尾随空格。</span><span class="sxs-lookup"><span data-stu-id="d5962-161">Ordinarily, when the result of an interpolated string expression is formatted to string, that string is included in a result string without leading or trailing spaces.</span></span> <span data-ttu-id="d5962-162">特别是对于使用一组数据的情况，控制字段宽度和对齐方式有助于增强输出的可读性。</span><span class="sxs-lookup"><span data-stu-id="d5962-162">Particularly when you work with a set of data, being able to control a field width and text alignment helps to produce a more readable output.</span></span> <span data-ttu-id="d5962-163">若要查看，请运行以下代码：</span><span class="sxs-lookup"><span data-stu-id="d5962-163">To see this, run the following code:</span></span>


    ```csharp
      var inventory = new Dictionary<string, int>()
      {
          ["hammer, ball pein"] = 18,
          ["hammer, cross pein"] = 5,
          ["screwdriver, Phillips #2"] = 14
      };

      Console.WriteLine($"Inventory on {DateTime.Now:d}");
      Console.WriteLine(" ");
      Console.WriteLine($"|{"Item",-25}|{"Quantity",10}|");
      foreach (var item in inventory)
         Console.WriteLine($"|{item.Key,-25}|{item.Value,10}|");
    ```


    <span data-ttu-id="d5962-164">项目名称为左对齐，其数量为右对齐。</span><span class="sxs-lookup"><span data-stu-id="d5962-164">The item names are left-aligned, and their quantities are right-aligned.</span></span> <span data-ttu-id="d5962-165">通过在内插表达式后面添加一个逗号（“,”）并指定“最小”字段宽度来指定对齐方式。</span><span class="sxs-lookup"><span data-stu-id="d5962-165">You specify the alignment by adding a comma (",") after an interpolation expression and designating the *minimum* field width.</span></span> <span data-ttu-id="d5962-166">如果指定的值是正数，则该字段为右对齐。</span><span class="sxs-lookup"><span data-stu-id="d5962-166">If the specified value is a positive number, the field is right-aligned.</span></span> <span data-ttu-id="d5962-167">如果它为负数，则该字段为左对齐。</span><span class="sxs-lookup"><span data-stu-id="d5962-167">If it is a negative number, the field is left-aligned.</span></span>


    <span data-ttu-id="d5962-168">尝试删除 `{"Item",-25}` 和 `{item.Key,-25}` 代码中的负号，然后再次运行该示例。</span><span class="sxs-lookup"><span data-stu-id="d5962-168">Try removing the negative signs from the `{"Item",-25}` and `{item.Key,-25}` code and run the example again.</span></span> <span data-ttu-id="d5962-169">此时，项名为右对齐。</span><span class="sxs-lookup"><span data-stu-id="d5962-169">This time, the item names are right-aligned.</span></span>


    <span data-ttu-id="d5962-170">可合并单个内插表达式中的对齐说明符和格式字符串。</span><span class="sxs-lookup"><span data-stu-id="d5962-170">You can combine an alignment specifier and a format string for a single interpolation expression.</span></span> <span data-ttu-id="d5962-171">为此，请先指定对齐方式，然后是冒号和格式字符串。</span><span class="sxs-lookup"><span data-stu-id="d5962-171">To do that, specify the alignment first, followed by a colon and the format string.</span></span> <span data-ttu-id="d5962-172">尝试以下示例代码，该代码使用定义的字段宽度显示三个格式化字符串：</span><span class="sxs-lookup"><span data-stu-id="d5962-172">Try the following code that displays three formatted strings with defined field widths:</span></span>


    ```csharp

    Console.WriteLine($"[{DateTime.Now,-20:d}] Hour [{DateTime.Now,-10:HH}] [{1063.342,15:N2}] feet");

    ```


    > [!NOTE]

    > <span data-ttu-id="d5962-173">此联机编码体验处于预览模式。</span><span class="sxs-lookup"><span data-stu-id="d5962-173">This online coding experience is in preview mode.</span></span> <span data-ttu-id="d5962-174">如果遇到问题，请[在 dotnet/try 存储库上](https://github.com/dotnet/try/issues)进行报告。</span><span class="sxs-lookup"><span data-stu-id="d5962-174">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- content: >-
    <span data-ttu-id="d5962-175">你已完成“字符串内插”交互式教程。</span><span class="sxs-lookup"><span data-stu-id="d5962-175">You've completed the string interpolation interactive tutorial.</span></span> <span data-ttu-id="d5962-176">可单击下方的“C# 中的集合”链接开始下一个交互式教程，或者可访问 [.NET 站点](https://www.microsoft.com/net/learn/dotnet/hello-world-tutorial)下载 .NET Core SDK，在计算机上创建项目，并继续编码。</span><span class="sxs-lookup"><span data-stu-id="d5962-176">You can click the **Collections in C#** link below to start the next interactive tutorial, or you can visit the [.NET site](https://www.microsoft.com/net/learn/dotnet/hello-world-tutorial) to download the .NET Core SDK, create a project on your machine, and keep coding.</span></span> <span data-ttu-id="d5962-177">“继续学习”步骤将带你回到教程中。</span><span class="sxs-lookup"><span data-stu-id="d5962-177">The "Keep Learning" step brings you back to these tutorials.</span></span>


    <span data-ttu-id="d5962-178">有关详细信息，请参阅[字符串内插](../../language-reference/tokens/interpolated.md)。</span><span class="sxs-lookup"><span data-stu-id="d5962-178">For more information, see [String interpolation](../../language-reference/tokens/interpolated.md).</span></span>
