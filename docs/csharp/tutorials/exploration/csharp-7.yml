### YamlMime:Tutorial
title: <span data-ttu-id="8013f-101">探索 C# 7.0 - C# 交互教程</span><span class="sxs-lookup"><span data-stu-id="8013f-101">Explore C# 7.0 - C# interactive tutorial</span></span>
metadata:
  title: 探索 C# 7.0 - 使用浏览器以交互方式尝试 C# 7.0 中的新功能
  description: 在本教程中，你将使用浏览器以交互方式探索 C# 7.0。 你将探索可以与 C# 7.0 配合使用的新的习惯用语，这些习惯用语支持较简洁的可读代码。
  audience: Developer
  level: intermediate
  ms.date: 03/20/2019
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: 70f4e93460c69b54702f160d502163827ec73218
  ms.sourcegitcommit: 0aca6c5d166d7961a1e354c248495645b97a1dc5
  ms.translationtype: HT
  ms.contentlocale: zh-CN
  ms.lasthandoff: 03/30/2019
  ms.locfileid: "58675518"
items:
- durationInMinutes: 1
  content: >
    <span data-ttu-id="8013f-105">通过本教程，使用浏览器编写 C#，并查看代码编译和运行结果，以交互方式探索 C# 7.0 功能。</span><span class="sxs-lookup"><span data-stu-id="8013f-105">This tutorial lets you explore C# 7.0 features interactively, using your browser to write C# and see the results of compiling and running your code.</span></span> <span data-ttu-id="8013f-106">本教程包含一系列课程，这些课程修改了早期的 C# 做法，以使用更新、更简洁的 C# 7.0 功能。</span><span class="sxs-lookup"><span data-stu-id="8013f-106">It contains a series of lessons that modify earlier C# practices to use newer, more concise C# 7.0 features.</span></span> <span data-ttu-id="8013f-107">本文的其余部分是对每个功能的概述，并提供用于探索每个功能的链接。</span><span class="sxs-lookup"><span data-stu-id="8013f-107">The rest of this article provides an overview of each of these features, with a link to explore each feature.</span></span>
- title: <span data-ttu-id="8013f-108">在赋值位置的 out 变量声明</span><span class="sxs-lookup"><span data-stu-id="8013f-108">Out variable declarations at the assignment location</span></span>
  durationInMinutes: 2
  content: "<span data-ttu-id=\"8013f-109\">支持 `out` 参数的现有语法已在此版本中得到改进。</span><span class=\"sxs-lookup\"><span data-stu-id=\"8013f-109\">The existing syntax that supports `out` parameters has been improved in this version.</span></span> <span data-ttu-id=\"8013f-110\">单击本页底部的“进入焦点模式”按钮，然后在交互式窗口中，尝试运行以下代码：</span><span class=\"sxs-lookup\"><span data-stu-id=\"8013f-110\">Click the *Enter Focus Mode* button at the bottom of this page, then try the following code in the interactive window:</span></span> \n\n[!code-csharp[OutVariableOldStyle](~/samples/snippets/csharp/new-in-7/program.cs#OutVariableOldStyle \"classic out variable declaration\")]\n\n<span data-ttu-id=\"8013f-111\">现在可以在方法调用的参数列表中声明 `out` 变量，而不是编写单独的声明语句。</span><span class=\"sxs-lookup\"><span data-stu-id=\"8013f-111\">You can now declare `out` variables in the argument list of a method call, rather than writing a separate declaration statement.</span></span> <span data-ttu-id=\"8013f-112\">可以将声明移到方法调用中。</span><span class=\"sxs-lookup\"><span data-stu-id=\"8013f-112\">You can move the declaration into the method call.</span></span> <span data-ttu-id=\"8013f-113\">在交互式窗口的底部，添加以下代码：</span><span class=\"sxs-lookup\"><span data-stu-id=\"8013f-113\">Add the following code to the bottom of the interactive window:</span></span>\n\n[!code-csharp[OutVariableDeclarations](~/samples/snippets/csharp/new-in-7/program.cs#OutVariableDeclarations \"Out variable declarations\")]\n\n<span data-ttu-id=\"8013f-114\">可将 `int` 声明更改为 `var` 声明。</span><span class=\"sxs-lookup\"><span data-stu-id=\"8013f-114\">You can change the `int` declaration to a `var` declaration.</span></span> <span data-ttu-id=\"8013f-115\">将以下代码添加到交互式窗口：</span><span class=\"sxs-lookup\"><span data-stu-id=\"8013f-115\">Add the following code to the interactive window:</span></span>\n\n[!code-csharp[OutVarVariableDeclarations](~/samples/snippets/csharp/new-in-7/program.cs#OutVarVariableDeclarations \"Implicitly typed Out variable\")]\n\n<span data-ttu-id=\"8013f-116\">与现有语法相比，新语法提供了两个重要优势：</span><span class=\"sxs-lookup\"><span data-stu-id=\"8013f-116\">The new syntax provides two important advantages over the existing syntax:</span></span>\n\n* <span data-ttu-id=\"8013f-117\">代码更易于阅读。</span><span class=\"sxs-lookup\"><span data-stu-id=\"8013f-117\">The code is easier to read.</span></span> \n    - <span data-ttu-id=\"8013f-118\">在使用 out 变量的地方声明 out 变量，而不是在上面的另一行。</span><span class=\"sxs-lookup\"><span data-stu-id=\"8013f-118\">You declare the out variable where you use it, not on another line above.</span></span>\n* <span data-ttu-id=\"8013f-119\">无需分配初始值。</span><span class=\"sxs-lookup\"><span data-stu-id=\"8013f-119\">No need to assign an initial value.</span></span>\n    - <span data-ttu-id=\"8013f-120\">通过在方法调用中使用 `out` 变量的位置声明该变量，使得在分配它之前不可能意外使用它。</span><span class=\"sxs-lookup\"><span data-stu-id=\"8013f-120\">By declaring the `out` variable where it is used in a method call, you can't accidentally use it before it is assigned.</span></span>\n\n<span data-ttu-id=\"8013f-121\">声明的变量的作用域是包含 `if` 语句的作用域。</span><span class=\"sxs-lookup\"><span data-stu-id=\"8013f-121\">The declared variable's scope is the scope enclosing the `if` statement.</span></span> <span data-ttu-id=\"8013f-122\">这让你可以在之后使用该变量。</span><span class=\"sxs-lookup\"><span data-stu-id=\"8013f-122\">This allows you to use the variable afterwards.</span></span> <span data-ttu-id=\"8013f-123\">修改上一个 `if` 块，如下面的代码段所示。</span><span class=\"sxs-lookup\"><span data-stu-id=\"8013f-123\">Modify the last `if` block as shown in the following snippet.</span></span>\n\n```csharp\nif (!int.TryParse(input, out int result))\n{    \n    return null;\n}\n\nConsole.WriteLine(result);\n```\n"
- title: <span data-ttu-id="8013f-124">元组创建轻量级数据结构</span><span class="sxs-lookup"><span data-stu-id="8013f-124">Tuples create light-weight data structures</span></span>
  durationInMinutes: 1
  content: "<span data-ttu-id=\"8013f-125\">元组是包含多个字段以表示数据成员的轻量级数据结构。</span><span class=\"sxs-lookup\"><span data-stu-id=\"8013f-125\">Tuples are lightweight data structures that contain multiple fields to represent the data members.</span></span> <span data-ttu-id=\"8013f-126\">这些字段没有经过验证，并且你无法定义自己的方法。</span><span class=\"sxs-lookup\"><span data-stu-id=\"8013f-126\">The fields are not validated, and you cannot define your own methods.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"8013f-127\">低于 C# 7.0 的版本中也提供元组，但它们效率低下且不具有语言支持。</span><span class=\"sxs-lookup\"><span data-stu-id=\"8013f-127\">Tuples were available before C# 7.0, but they were inefficient and had no language support.</span></span> <span data-ttu-id=\"8013f-128\">这意味着元组元素只能作为 `Item1` 和 `Item2` 等引用。</span><span class=\"sxs-lookup\"><span data-stu-id=\"8013f-128\">This meant that tuple elements could only be referenced as `Item1`, `Item2` and so on.</span></span> <span data-ttu-id=\"8013f-129\">C# 7.0 引入了对元组的语言支持，可利用更有效的新元组类型向元组字段赋予语义名称。</span><span class=\"sxs-lookup\"><span data-stu-id=\"8013f-129\">C# 7.0 introduces language support for tuples, which enables semantic names for the fields of a tuple using new more efficient tuple types.</span></span>\n\n<span data-ttu-id=\"8013f-130\">通过为每个命名成员赋值，可以创建一个元组：</span><span class=\"sxs-lookup\"><span data-stu-id=\"8013f-130\">You can create a tuple by assigning a value to each named member:</span></span>\n\n[!code-csharp[NamedTuple](~/samples/snippets/csharp/new-in-7/program.cs#NamedTuple \"Named tuple\")]\n\n<span data-ttu-id=\"8013f-131\">`namedLetters` 元组包含称为 `Alpha` 和 `Beta` 的字段。</span><span class=\"sxs-lookup\"><span data-stu-id=\"8013f-131\">The `namedLetters` tuple contains fields referred to as `Alpha` and `Beta`.</span></span> <span data-ttu-id=\"8013f-132\">这些名称仅在编译时存在，并且不会在运行时保留（例如，在使用反射检查元组时）。</span><span class=\"sxs-lookup\"><span data-stu-id=\"8013f-132\">Those names exist only at compile time and are not preserved at runtime (when inspecting the tuple using reflection, for example).</span></span>\n\n<span data-ttu-id=\"8013f-133\">在进行元组赋值时，还可以指定赋值右侧的字段的名称：</span><span class=\"sxs-lookup\"><span data-stu-id=\"8013f-133\">In a tuple assignment, you can also specify the names of the fields on the right-hand side of the assignment:</span></span> \n\n[!code-csharp[ImplicitNamedTuple](~/samples/snippets/csharp/new-in-7/program.cs#ImplicitNamedTuple \"Implicitly named tuple\")]\n\n<span data-ttu-id=\"8013f-134\">可指定赋值左侧和右侧字段的名称，但右侧的名称会被忽略。</span><span class=\"sxs-lookup\"><span data-stu-id=\"8013f-134\">You can specify names for the fields on both the left and right-hand side of the assignment, but the names on the right side are ignored.</span></span>\n\n<span data-ttu-id=\"8013f-135\">元组在作为 `private` 和 `internal` 方法的返回类型时是最有用的。</span><span class=\"sxs-lookup\"><span data-stu-id=\"8013f-135\">Tuples are most useful as return types for `private` and `internal` methods.</span></span> <span data-ttu-id=\"8013f-136\">元组为这些方法提供了一个简单语法来返回多个离散值。</span><span class=\"sxs-lookup\"><span data-stu-id=\"8013f-136\">Tuples provide a simple syntax for those methods to return multiple discrete values.</span></span>\n\n<span data-ttu-id=\"8013f-137\">创建元组比创建类或结构更有效且更高效。</span><span class=\"sxs-lookup\"><span data-stu-id=\"8013f-137\">Creating a tuple is more efficient and more productive that creating a class or struct.</span></span> <span data-ttu-id=\"8013f-138\">它是一种更简单的轻量级语法，用于定义携带多个值的数据结构。</span><span class=\"sxs-lookup\"><span data-stu-id=\"8013f-138\">It has a simpler, lightweight syntax to define a data structure that carries more than one value.</span></span> <span data-ttu-id=\"8013f-139\">下面的示例方法返回在一个整数序列中找到的最小值和最大值：</span><span class=\"sxs-lookup\"><span data-stu-id=\"8013f-139\">The example method below returns the minimum and maximum values found in a sequence of integers:</span></span>\n\n[!code-csharp[TupleReturningMethod](~/samples/snippets/csharp/new-in-7/program.cs#TupleReturningMethod \"Tuple returning method\")]\n\n<span data-ttu-id=\"8013f-140\">在某些时候，你可能想要解包从方法返回的元组的成员。</span><span class=\"sxs-lookup\"><span data-stu-id=\"8013f-140\">There may be times when you want to unpackage the members of a tuple that were returned from a method.</span></span>  <span data-ttu-id=\"8013f-141\">可通过为元组中的每个值声明单独的变量来实现此目的。</span><span class=\"sxs-lookup\"><span data-stu-id=\"8013f-141\">You can do that by declaring separate variables for each of the values in the tuple.</span></span> <span data-ttu-id=\"8013f-142\">这称为析构元组。</span><span class=\"sxs-lookup\"><span data-stu-id=\"8013f-142\">This is called *deconstructing* the tuple.</span></span> <span data-ttu-id=\"8013f-143\">在浏览器中添加以下代码以进行尝试：</span><span class=\"sxs-lookup\"><span data-stu-id=\"8013f-143\">Add the following code in your browser to try it:</span></span>\n\n[!code-csharp[CallingWithDeconstructor](~/samples/snippets/csharp/new-in-7/program.cs#CallingWithDeconstructor \"Deconstructing a tuple\")]\n\n<span data-ttu-id=\"8013f-144\">使用元组时，通常会发现并未使用元组结果的所有成员。</span><span class=\"sxs-lookup\"><span data-stu-id=\"8013f-144\">As you work with tuples, you'll often find that you don't use all of the members of a tuple result.</span></span> <span data-ttu-id=\"8013f-145\">发生这种情况时，可通过使用 `_` 代替变量来丢弃一个或多个返回值。</span><span class=\"sxs-lookup\"><span data-stu-id=\"8013f-145\">When that happens, you can discard one or more of the returned values by using `_` in place of a variable.</span></span> <span data-ttu-id=\"8013f-146\">在浏览器中添加以下代码以进行尝试：</span><span class=\"sxs-lookup\"><span data-stu-id=\"8013f-146\">Add the following code in your browser to try it:</span></span>\n\n[!code-csharp[DiscardTupleMember](~/samples/snippets/csharp/new-in-7/program.cs#DiscardMember \"Discard a tuple member\")]\n\n<span data-ttu-id=\"8013f-147\">可在[元组相关文章](../../tuples.md)中深入了解有关元组的详细信息。</span><span class=\"sxs-lookup\"><span data-stu-id=\"8013f-147\">You can learn more in depth about tuples in the [tuples article](../../tuples.md).</span></span>\n<span data-ttu-id=\"8013f-148\">可以在[弃元相关文章](../../discards.md)中了解有关弃元的更多信息。</span><span class=\"sxs-lookup\"><span data-stu-id=\"8013f-148\">You can learn more about discards in the [discards article](../../discards.md).</span></span>\n"
- title: <span data-ttu-id="8013f-149">配合使用类型模式和 is 表达式</span><span class="sxs-lookup"><span data-stu-id="8013f-149">Use the type pattern with the is expression</span></span>
  durationInMinutes: 2
  content: >
    <span data-ttu-id="8013f-150">`is` 模式表达式扩展了常用 [`is` 运算符](../../language-reference/keywords/is.md#pattern-matching-with-is)，使其可查询其类型之外的对象。</span><span class="sxs-lookup"><span data-stu-id="8013f-150">The `is` pattern expression extends the familiar [`is` operator](../../language-reference/keywords/is.md#pattern-matching-with-is) to query an object beyond its type.</span></span>


    <span data-ttu-id="8013f-151">在浏览器窗口中尝试以下代码：</span><span class="sxs-lookup"><span data-stu-id="8013f-151">Try the following code in your browser window:</span></span>


    [!code-csharp[SimpleIs](~/samples/snippets/csharp/new-in-7/patternmatch.cs#SimpleIsPattern "Simple Is pattern")]


    <span data-ttu-id="8013f-152">将变量声明更改为字符串：</span><span class="sxs-lookup"><span data-stu-id="8013f-152">Change the variable declaration to a string instead:</span></span>


    ```csharp

    object count = "5";

    ```


    <span data-ttu-id="8013f-153">现在，`is` 表达式为 false，因此执行 `else` 分支。</span><span class="sxs-lookup"><span data-stu-id="8013f-153">Now, the `is` expression is false, so the `else` branch is executed.</span></span> <span data-ttu-id="8013f-154">尝试在其他分支中将 `count` 更改为 `number`：</span><span class="sxs-lookup"><span data-stu-id="8013f-154">Try to change `count` to `number` in the else branch:</span></span>


    ```csharp

    Console.WriteLine($"{number} is not an integer");

    ```


    <span data-ttu-id="8013f-155">以上内容无法编译，因为 `else` 分支中未分配 `number`。</span><span class="sxs-lookup"><span data-stu-id="8013f-155">The above won't compile because `number` isn't assigned in the `else` branch.</span></span> <span data-ttu-id="8013f-156">它仅在 `if` 语句的 `true` 分支中分配。</span><span class="sxs-lookup"><span data-stu-id="8013f-156">It's only assigned in the `true` branch of the `if` statement.</span></span>


    <span data-ttu-id="8013f-157">当要测试少量类型时，`is` 表达式类型模式很有用。</span><span class="sxs-lookup"><span data-stu-id="8013f-157">The `is` expression type pattern is useful when you have a small number of types to test against.</span></span> <span data-ttu-id="8013f-158">通常可能需要测试多种类型。</span><span class="sxs-lookup"><span data-stu-id="8013f-158">Often, you may need to test multiple types.</span></span> <span data-ttu-id="8013f-159">这需要模式匹配 `switch` 语句。</span><span class="sxs-lookup"><span data-stu-id="8013f-159">That requires the pattern matching `switch` statement.</span></span>
- title: <span data-ttu-id="8013f-160">Switch 语句中的模式匹配</span><span class="sxs-lookup"><span data-stu-id="8013f-160">Pattern matching in the switch statement</span></span>
  durationInMinutes: 2
  content: >
    <span data-ttu-id="8013f-161">匹配表达式具有熟悉的语法，它基于已属于 C# 语言的 `switch` 语句。</span><span class="sxs-lookup"><span data-stu-id="8013f-161">The *match expression* has a familiar syntax, based on the `switch` statement already part of the C# language.</span></span> <span data-ttu-id="8013f-162">我们首先查看基于在上一页了解的 `is` 表达式语法的小示例：</span><span class="sxs-lookup"><span data-stu-id="8013f-162">Let's start with a small sample based on the `is` expression syntax you explored on the previous page:</span></span>


    [!code-csharp[SimpleSwitch](~/samples/snippets/csharp/new-in-7/patternmatch.cs#SimpleSwitchPattern "simple switch")]


    <span data-ttu-id="8013f-163">上述代码检查是否存在 `int` 或 `null`。</span><span class="sxs-lookup"><span data-stu-id="8013f-163">The preceding code checks for an `int` or `null`.</span></span> <span data-ttu-id="8013f-164">每种其他类型都达到了默认情况。</span><span class="sxs-lookup"><span data-stu-id="8013f-164">Every other type reached the default case.</span></span> <span data-ttu-id="8013f-165">添加以下两行以验证行为：</span><span class="sxs-lookup"><span data-stu-id="8013f-165">Add the following two lines to verify the behavior:</span></span>


    [!code-csharp[AddLongCase](~/samples/snippets/csharp/new-in-7/patternmatch.cs#TestLong "Add a case for long")]


    <span data-ttu-id="8013f-166">`switch` 表达式会将可为 null 的类型转换为其对应的类型。</span><span class="sxs-lookup"><span data-stu-id="8013f-166">The `switch` expression will convert a nullable type to its corresponding type.</span></span> <span data-ttu-id="8013f-167">添加以下内容以验证：</span><span class="sxs-lookup"><span data-stu-id="8013f-167">Add the following to verify:</span></span>


    [!code-csharp[NullableCase](~/samples/snippets/csharp/new-in-7/patternmatch.cs#NullableSwitch "Add a nullable case")]


    <span data-ttu-id="8013f-168">可以向 switch 语句添加任意数量的其他类型模式表达式。</span><span class="sxs-lookup"><span data-stu-id="8013f-168">You can add any number of other type pattern expressions to the switch statements.</span></span> <span data-ttu-id="8013f-169">在 `null` 事例之前添加以下内容：</span><span class="sxs-lookup"><span data-stu-id="8013f-169">Add these before the `null` case:</span></span>


    [!code-csharp[MoreTypeCases](~/samples/snippets/csharp/new-in-7/patternmatch.cs#MoreCases "Add more type cases")]


    <span data-ttu-id="8013f-170">通过添加以下测试确保这些内容生效：</span><span class="sxs-lookup"><span data-stu-id="8013f-170">Make sure these work by adding the following tests:</span></span>


    [!code-csharp[AddMoreTests](~/samples/snippets/csharp/new-in-7/patternmatch.cs#MoreTests "Add more type tests")]


    <span data-ttu-id="8013f-171">匹配表达式也支持常量。</span><span class="sxs-lookup"><span data-stu-id="8013f-171">The match expressions also support constants.</span></span> <span data-ttu-id="8013f-172">这样可以通过分离出简单 case 来节省时间：</span><span class="sxs-lookup"><span data-stu-id="8013f-172">This can save time by factoring out simple cases:</span></span>


    [!code-csharp[ConstantCase](~/samples/snippets/csharp/new-in-7/patternmatch.cs#ConstantCase "Add a constant case")]


    <span data-ttu-id="8013f-173">必须在 `case int:` 表达式之前添加上面的事例。</span><span class="sxs-lookup"><span data-stu-id="8013f-173">You must add the preceding case *before* the `case int:` expression.</span></span> <span data-ttu-id="8013f-174">如果在该事例之后添加，编译器会警告它已由先前的事例处理过。</span><span class="sxs-lookup"><span data-stu-id="8013f-174">If you add it after that case, the compiler warns you that it has already been handled by a previous case.</span></span>


    <span data-ttu-id="8013f-175">可以向任何模式事例添加 `when` 子句，以便可以测试类型或常量值之外的其他条件。</span><span class="sxs-lookup"><span data-stu-id="8013f-175">You can add a `when` clause to any pattern case so that you can test other conditions beyond a type or a constant value.</span></span> <span data-ttu-id="8013f-176">通过在常规 `string` 事例上方添加以下事例来尝试此做法：</span><span class="sxs-lookup"><span data-stu-id="8013f-176">Try it by adding the following case above the general `string` case:</span></span>


    [!code-csharp[WhenClause](~/samples/snippets/csharp/new-in-7/patternmatch.cs#WhenClause "Add a when clause")]


    <span data-ttu-id="8013f-177">用类似下方的代码进行测试：</span><span class="sxs-lookup"><span data-stu-id="8013f-177">Test it with something like the following code:</span></span>


    [!code-csharp[TestWhenClause](~/samples/snippets/csharp/new-in-7/patternmatch.cs#TestWhenClause "Test the when clause")]


    <span data-ttu-id="8013f-178">模式匹配表达式的新语法使得使用清晰简练的语法创建基于对象的类型或其他属性的分派算法更加容易。</span><span class="sxs-lookup"><span data-stu-id="8013f-178">The new syntax for pattern matching expressions makes it easier to create dispatch algorithms using a clear and concise syntax based on an object's type or other properties.</span></span> <span data-ttu-id="8013f-179">模式匹配表达式可以在因继承而无关的数据类型上实现这些构造。</span><span class="sxs-lookup"><span data-stu-id="8013f-179">Pattern matching expressions enable these constructs on data types that are unrelated by inheritance.</span></span>


    <span data-ttu-id="8013f-180">可在专门介绍 [C# 中的模式匹配](../../pattern-matching.md)的文章中了解有关模式匹配的详细信息。</span><span class="sxs-lookup"><span data-stu-id="8013f-180">You can learn more about pattern matching in the article dedicated to [pattern matching in C#](../../pattern-matching.md).</span></span>
- title: <span data-ttu-id="8013f-181">使用 ref 局部变量和返回结果优化内存存储</span><span class="sxs-lookup"><span data-stu-id="8013f-181">Optimize memory storage using ref locals and returns</span></span>
  durationInMinutes: 2
  content: >
    <span data-ttu-id="8013f-182">此功能允许使用并返回对变量的引用的算法，这些变量在其他位置定义。</span><span class="sxs-lookup"><span data-stu-id="8013f-182">This feature enables algorithms that use and return references to variables defined elsewhere.</span></span> <span data-ttu-id="8013f-183">一个示例是使用大型矩阵并查找具有某些特征的单个位置。</span><span class="sxs-lookup"><span data-stu-id="8013f-183">One example is with large matrices and finding a single location with certain characteristics.</span></span> <span data-ttu-id="8013f-184">有一个方法可返回矩阵中某单个位置的两个索引：</span><span class="sxs-lookup"><span data-stu-id="8013f-184">One method would return the two indices a single location in the matrix:</span></span>


    [!code-csharp[EverythingByValue](~/samples/snippets/csharp/new-in-7/MatrixSearch.cs#EverythingByValue "return indices by value")]


    <span data-ttu-id="8013f-185">可使用以下代码测试此方法：</span><span class="sxs-lookup"><span data-stu-id="8013f-185">You can test this method using the following code:</span></span>


    [!code-csharp[TestByValue](~/samples/snippets/csharp/new-in-7/MatrixSearch.cs#TestByValue "test code for return indices by value")]



    <span data-ttu-id="8013f-186">`Find` 方法返回的是矩阵中的项的索引。</span><span class="sxs-lookup"><span data-stu-id="8013f-186">This `Find` method returns the indices to the item in the matrix.</span></span> <span data-ttu-id="8013f-187">这会导致调用方编写使用这些索引的代码来取消引用矩阵并修改单个元素。</span><span class="sxs-lookup"><span data-stu-id="8013f-187">That leads callers to write code that uses those indices to dereference the matrix and modify a single element.</span></span> <span data-ttu-id="8013f-188">与其这样，还不如编写一个方法，返回对你要更改的矩阵的元素的引用。</span><span class="sxs-lookup"><span data-stu-id="8013f-188">You'd rather write a method that returns a *reference* to the element of the matrix that you want to change.</span></span>


    <span data-ttu-id="8013f-189">让我们通过一系列更改来演示 ref 局部变量功能，并展示如何创建返回对内部存储的引用的方法。</span><span class="sxs-lookup"><span data-stu-id="8013f-189">Let's walk through a series of changes to demonstrate the ref local feature and show how to create a method that returns a reference to internal storage.</span></span> <span data-ttu-id="8013f-190">与此同时，你将学习 ref 返回结果的规则以及可保护你免于意外误用它的 ref 局部变量功能。</span><span class="sxs-lookup"><span data-stu-id="8013f-190">Along the way, you'll learn the rules of the ref return and ref local feature that protect you from accidentally misusing it.</span></span>


    <span data-ttu-id="8013f-191">首先修改 `Find` 方法声明，使其返回一个 `ref int`，而不是一个元组。</span><span class="sxs-lookup"><span data-stu-id="8013f-191">Start by modifying the `Find` method declaration so that it returns a `ref int` instead of a tuple.</span></span>


    ```csharp

    ref int Find(int[,] matrix, Func<int, bool> predicate)

    ```


    <span data-ttu-id="8013f-192">修改返回语句以返回位于正确索引的项：</span><span class="sxs-lookup"><span data-stu-id="8013f-192">Modify the return statement to return the item at the correct indices:</span></span>


    ```csharp

    return matrix[i,j];

    ```


    <span data-ttu-id="8013f-193">更改最终返回以引发异常：</span><span class="sxs-lookup"><span data-stu-id="8013f-193">Change the final return to throw an exception instead:</span></span>


    ```csharp

    throw new InvalidOperationException("Not found");

    ```


    <span data-ttu-id="8013f-194">请注意，此时将不会编译。</span><span class="sxs-lookup"><span data-stu-id="8013f-194">Note that this won't compile.</span></span> <span data-ttu-id="8013f-195">方法声明指示 `ref` 返回，但返回语句指定值返回。</span><span class="sxs-lookup"><span data-stu-id="8013f-195">The method declaration indicates a `ref` return, but the return statement specifies a value return.</span></span> <span data-ttu-id="8013f-196">必须将 `ref` 关键字添加到每个返回语句。</span><span class="sxs-lookup"><span data-stu-id="8013f-196">You must add the `ref` keyword to each return statement.</span></span> <span data-ttu-id="8013f-197">这指示按引用返回，并可帮助以后阅读代码的开发人员记住该方法按引用返回：</span><span class="sxs-lookup"><span data-stu-id="8013f-197">That indicates return by reference, and helps developers reading the code later remember that the method returns by reference:</span></span>


    ```csharp

    return ref matrix[i,j];

    ```


    <span data-ttu-id="8013f-198">因为该方法返回对矩阵中的整数值的引用，所以你需要修改调用它的位置。</span><span class="sxs-lookup"><span data-stu-id="8013f-198">Now that the method returns a reference to the integer value in the matrix, you need to modify where it's called.</span></span> <span data-ttu-id="8013f-199">`var` 声明意味着 `valItem` 现在是 `int` 而不是元组。</span><span class="sxs-lookup"><span data-stu-id="8013f-199">The `var` declaration means that `valItem` is now an `int` rather than a tuple.</span></span> <span data-ttu-id="8013f-200">将调用代码更改为以下内容：</span><span class="sxs-lookup"><span data-stu-id="8013f-200">Change the calling code to the following:</span></span>


    ```csharp

    var valItem = Find(matrix, (val) => val == 42);

    Console.WriteLine(valItem);

    valItem = 24;

    Console.WriteLine(matrix[4, 2]);

    ```


    <span data-ttu-id="8013f-201">上例中的第二个 `WriteLine` 语句打印出值 `42`，而不是 `24`。</span><span class="sxs-lookup"><span data-stu-id="8013f-201">The second `WriteLine` statement in the example above prints out the value `42`, not `24`.</span></span> <span data-ttu-id="8013f-202">变量 `valItem` 是 `int`，而不是 `ref int`。</span><span class="sxs-lookup"><span data-stu-id="8013f-202">The variable `valItem` is an `int`, not a `ref int`.</span></span> <span data-ttu-id="8013f-203">`var` 关键字使编译器能够指定类型，但不会隐式添加 `ref` 修饰符。</span><span class="sxs-lookup"><span data-stu-id="8013f-203">The `var` keyword enables the compiler to specify the type but will not implicitly add the `ref` modifier.</span></span> <span data-ttu-id="8013f-204">相反，`ref return` 引用的值会被复制到赋值左侧的变量。</span><span class="sxs-lookup"><span data-stu-id="8013f-204">Instead, the value referred to by the `ref return` is *copied* to the variable on the left-hand side of the assignment.</span></span> <span data-ttu-id="8013f-205">该变量不是 `ref` 局部变量。</span><span class="sxs-lookup"><span data-stu-id="8013f-205">The variable is not a `ref` local.</span></span>


    <span data-ttu-id="8013f-206">为了修改返回的引用，需要将 `ref` 修饰符添加到局部变量声明中，并在调用 `Find` 之前，使变量在返回值为引用时成为引用。</span><span class="sxs-lookup"><span data-stu-id="8013f-206">In order to modify the returned reference, you need to add the `ref` modifier to the local variable declaration and before the call to `Find` to make the variable a reference when the return value is a reference.</span></span> <span data-ttu-id="8013f-207">修改浏览器中的测试代码以匹配以下内容：</span><span class="sxs-lookup"><span data-stu-id="8013f-207">Modify the test code in your browser to match the following:</span></span>


    [!code-csharp[EverythingByValue](~/samples/snippets/csharp/new-in-7/MatrixSearch.cs#TestByValue "test code for return object by reference")]


    <span data-ttu-id="8013f-208">现在，上例中的第二个 `WriteLine` 语句打印出值 `24`，指示矩阵中的存储已被修改。</span><span class="sxs-lookup"><span data-stu-id="8013f-208">Now, the second `WriteLine` statement in the example above prints out the value `24`, indicating that the storage in the matrix has been modified.</span></span> <span data-ttu-id="8013f-209">局部变量已使用 `ref` 修饰符进行声明，它将返回 `ref`。</span><span class="sxs-lookup"><span data-stu-id="8013f-209">The local variable has been declared with the `ref` modifier, and it will take a `ref` return.</span></span> <span data-ttu-id="8013f-210">必须在声明时初始化 `ref` 变量，不能拆分声明和初始化。</span><span class="sxs-lookup"><span data-stu-id="8013f-210">You must initialize a `ref` variable when it is declared; you cannot split the declaration and the initialization.</span></span>


    <span data-ttu-id="8013f-211">C# 语言还设有三条规则，可防止你误用 `ref` 局部变量和返回结果：</span><span class="sxs-lookup"><span data-stu-id="8013f-211">The C# language has three other rules that protect you from misusing the `ref` locals and returns:</span></span>


    * <span data-ttu-id="8013f-212">不可向 `ref` 本地变量赋予标准方法返回值。</span><span class="sxs-lookup"><span data-stu-id="8013f-212">You cannot assign a standard method return value to a `ref` local variable.</span></span>

    * <span data-ttu-id="8013f-213">不能将 `ref` 返回给其生存期不超出方法执行的变量。</span><span class="sxs-lookup"><span data-stu-id="8013f-213">You cannot return a `ref` to a variable whose lifetime does not extend beyond the execution of the method.</span></span>

    * <span data-ttu-id="8013f-214">`ref` 局部变量和返回结果不可用于异步方法。</span><span class="sxs-lookup"><span data-stu-id="8013f-214">`ref` locals and returns can't be used with async methods.</span></span>


    <span data-ttu-id="8013f-215">添加 ref 局部变量和 ref 返回结果可通过避免复制值或多次执行取消引用操作，允许更为高效的算法。</span><span class="sxs-lookup"><span data-stu-id="8013f-215">The addition of ref locals and ref returns enable algorithms that are more efficient by avoiding copying values or performing dereferencing operations multiple times.</span></span>


    <span data-ttu-id="8013f-216">有关详细信息，请参阅 [ref 关键字](../../language-reference/keywords/ref.md)一文。</span><span class="sxs-lookup"><span data-stu-id="8013f-216">For more information, see the [ref keyword](../../language-reference/keywords/ref.md) article.</span></span>
- title: <span data-ttu-id="8013f-217">使用本地函数最大程度减少对代码的访问</span><span class="sxs-lookup"><span data-stu-id="8013f-217">Minimize access to code with local functions</span></span>
  durationInMinutes: 2
  content: "<span data-ttu-id=\"8013f-218\">现在可以声明嵌套在其他函数中的本地函数。</span><span class=\"sxs-lookup\"><span data-stu-id=\"8013f-218\">You can now declare local functions that are nested inside other functions.</span></span> <span data-ttu-id=\"8013f-219\">这使你可以最大程度减少这些函数的可见性。</span><span class=\"sxs-lookup\"><span data-stu-id=\"8013f-219\">This enables you to minimize the visibility of these functions.</span></span> <span data-ttu-id=\"8013f-220\">本地函数有三个明显的用例：</span><span class=\"sxs-lookup\"><span data-stu-id=\"8013f-220\">There are three obvious use cases for local functions:</span></span>\n\n- <span data-ttu-id=\"8013f-221\">递归函数。</span><span class=\"sxs-lookup\"><span data-stu-id=\"8013f-221\">Recursive functions.</span></span>\n- <span data-ttu-id=\"8013f-222\">迭代器方法。</span><span class=\"sxs-lookup\"><span data-stu-id=\"8013f-222\">Iterator methods.</span></span>\n- <span data-ttu-id=\"8013f-223\">异步方法。</span><span class=\"sxs-lookup\"><span data-stu-id=\"8013f-223\">Asynchronous methods.</span></span>\n\n<span data-ttu-id=\"8013f-224\">我们从递归方法开始。</span><span class=\"sxs-lookup\"><span data-stu-id=\"8013f-224\">Let's start with recursive methods.</span></span> <span data-ttu-id=\"8013f-225\">在浏览器中尝试使用以下代码来计算 `6!`（阶乘）：</span><span class=\"sxs-lookup\"><span data-stu-id=\"8013f-225\">Try the following code in the browser to calculate `6!` (factorial):</span></span>\n\n```csharp\nint LocalFunctionFactorial(int n)\n{\n    return nthFactorial(n);\n\n    int nthFactorial(int number) => (number < 2) ? \n        1 : number * nthFactorial(number - 1);\n}\n\nConsole.WriteLine(LocalFunctionFactorial(6));\n```\n\n<span data-ttu-id=\"8013f-226\">本地函数是实现递归算法的有效方法。</span><span class=\"sxs-lookup\"><span data-stu-id=\"8013f-226\">Local functions are a great way to implement recursive algorithms.</span></span> <span data-ttu-id=\"8013f-227\">其他常见用途是用于公共迭代器方法和公共异步方法。</span><span class=\"sxs-lookup\"><span data-stu-id=\"8013f-227\">Other common uses are for public iterator methods and public async methods.</span></span> <span data-ttu-id=\"8013f-228\">这两种类型的方法都生成报告错误的时间晚于程序员期望时间的代码。</span><span class=\"sxs-lookup\"><span data-stu-id=\"8013f-228\">Both types of methods generate     code that reports errors later than programmers might expect.</span></span> <span data-ttu-id=\"8013f-229\">在迭代器方法中，只有在调用枚举返回的序列的代码时才会观察到任何异常。</span><span class=\"sxs-lookup\"><span data-stu-id=\"8013f-229\">In the case of iterator methods, any exceptions are observed only when calling code that enumerates the returned sequence.</span></span> <span data-ttu-id=\"8013f-230\">在异步方法中，只有当返回的 `Task` 处于等待状态时才会观察到任何异常。</span><span class=\"sxs-lookup\"><span data-stu-id=\"8013f-230\">In the case of async methods, any exceptions are only observed when the returned `Task` is awaited.</span></span>\n\n<span data-ttu-id=\"8013f-231\">迭代器方法更便于在浏览器中探索，所以我们在此次探索中使用这些方法。</span><span class=\"sxs-lookup\"><span data-stu-id=\"8013f-231\">Iterator methods are easier to explore in the browser, so let's use those in this exploration.</span></span> <span data-ttu-id=\"8013f-232\">在浏览器中尝试可调用迭代器方法的以下代码：</span><span class=\"sxs-lookup\"><span data-stu-id=\"8013f-232\">Try the following code that calls an iterator method in your browser:</span></span>\n\n[!code-csharp[IteratorMethod](~/samples/snippets/csharp/new-in-7/Iterator.cs#SnippetIteratorMethod \"Iterator method\")]\n\n<span data-ttu-id=\"8013f-233\">运行代码。</span><span class=\"sxs-lookup\"><span data-stu-id=\"8013f-233\">Run the code.</span></span> <span data-ttu-id=\"8013f-234\">请注意，当代码开始循环访问第二个结果集时，将会引发异常。</span><span class=\"sxs-lookup\"><span data-stu-id=\"8013f-234\">Notice that the exception is thrown when the code begins iterating the second result set.</span></span> <span data-ttu-id=\"8013f-235\">循环访问第一个结果集的代码已经运行。</span><span class=\"sxs-lookup\"><span data-stu-id=\"8013f-235\">The code that iterates the first result set has already run.</span></span> <span data-ttu-id=\"8013f-236\">此示例较小，并且不会更改任何数据结构，因此它不会造成损害且易于修复。</span><span class=\"sxs-lookup\"><span data-stu-id=\"8013f-236\">This sample is both small and doesn't change any data structures, dso it's harmless and easy to fix.</span></span> <span data-ttu-id=\"8013f-237\">但是，在较大的程序中，两个迭代器对象可能在不同的子方法中创建，因此可能很难找到根本原因。</span><span class=\"sxs-lookup\"><span data-stu-id=\"8013f-237\">But, in a larger program, where the two iterator objects may be created in different child methods the root cause could be hard to find.</span></span> <span data-ttu-id=\"8013f-238\">如果第一个迭代器方法改变了数据状态，它甚至可能导致数据损坏。</span><span class=\"sxs-lookup\"><span data-stu-id=\"8013f-238\">If the first iterator method changed data state, it could even cause data corruption.</span></span> <span data-ttu-id=\"8013f-239\">最好在尚未完成任何工作前便立刻引发异常。</span><span class=\"sxs-lookup\"><span data-stu-id=\"8013f-239\">You'd prefer the exception was thrown immediately, before any work is done.</span></span> <span data-ttu-id=\"8013f-240\">可以重构代码，以便公共方法验证所有参数以及执行枚举的本地函数：</span><span class=\"sxs-lookup\"><span data-stu-id=\"8013f-240\">You can refactor the code so that the public method validates all arguments, and a local function that performs the enumeration:</span></span>\n\n[!code-csharp[IteratorMethodRefactored](~/samples/snippets/csharp/new-in-7/Iterator.cs#IteratorMethodLocalInteractive \"Iterator method refactored\")]\n\n<span data-ttu-id=\"8013f-241\">前面的版本清楚地表明，本地方法仅在外部方法的上下文中引用。</span><span class=\"sxs-lookup\"><span data-stu-id=\"8013f-241\">The preceding version makes it clear that the local method is referenced only in the context of the outer method.</span></span> <span data-ttu-id=\"8013f-242\">本地函数的规则还确保开发人员不会意外地从类中的另一个位置调用本地函数和绕过参数验证。</span><span class=\"sxs-lookup\"><span data-stu-id=\"8013f-242\">The rules for local functions also ensure that a developer can't accidentally call the local function from another location in the class and bypass the argument validation.</span></span>\n\n<span data-ttu-id=\"8013f-243\">可以对 `async` 方法采用相同的技术，以确保在异步工作开始之前引发由参数验证引起的异常。</span><span class=\"sxs-lookup\"><span data-stu-id=\"8013f-243\">The same technique can be employed with `async` methods to ensure that exceptions arising from argument validation are thrown before the asynchronous work begins.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"8013f-244\">本地函数支持的某些设计也可以使用 lambda 表达式来完成。</span><span class=\"sxs-lookup\"><span data-stu-id=\"8013f-244\">Some of the designs that are supported by local functions could also be accomplished using *lambda expressions*.</span></span> <span data-ttu-id=\"8013f-245\">感兴趣的读者可以[阅读有关差异的详细信息](../../local-functions-vs-lambdas.md)。</span><span class=\"sxs-lookup\"><span data-stu-id=\"8013f-245\">Those interested can [read more about the differences](../../local-functions-vs-lambdas.md).</span></span>\n"
- content: <span data-ttu-id="8013f-246">现已完成对 C# 7 中主要新功能的探索。</span><span class="sxs-lookup"><span data-stu-id="8013f-246">You've completed an exploration of the major new features in C# 7.</span></span> <span data-ttu-id="8013f-247">请立即在应用程序中亲自尝试新功能。</span><span class="sxs-lookup"><span data-stu-id="8013f-247">Now try them yourself in your applications.</span></span> <span data-ttu-id="8013f-248">可在 [C# 7 中的新增功能](../../whats-new/csharp-7.md)一文中查看完整列表。</span><span class="sxs-lookup"><span data-stu-id="8013f-248">You can see the full list in the [what's new in C# 7](../../whats-new/csharp-7.md) article.</span></span>
